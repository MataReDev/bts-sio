import{_ as e,c as s,o as i,U as a}from"./chunks/framework.aGaNZw_P.js";const t="/assets/interface_uml1.COLe6LZs.png",n="/assets/interface_uml2.CYVKsWh3.png",l="/assets/interface_uml3.BPYsoE_e.png",g=JSON.parse('{"title":"Interface : Mise en pratique 1","description":"Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des Interfaces PHP. Les interfaces sont un élément important de la programmation-objet, pour rappel les Interfaces sont un type des classes abstraites (instanciation impossible)","frontmatter":{"description":"Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des Interfaces PHP. Les interfaces sont un élément important de la programmation-objet, pour rappel les Interfaces sont un type des classes abstraites (instanciation impossible)"},"headers":[],"relativePath":"cours/exercices/poo/les-interfaces-1.md","filePath":"cours/exercices/poo/les-interfaces-1.md","lastUpdated":1704112852000}'),r={name:"cours/exercices/poo/les-interfaces-1.md"},o=a('<h1 id="interface-mise-en-pratique-1" tabindex="-1">Interface : Mise en pratique 1 <a class="header-anchor" href="#interface-mise-en-pratique-1" aria-label="Permalink to &quot;Interface : Mise en pratique 1&quot;">​</a></h1><details class="details custom-block"><summary>Table des matières</summary><nav class="table-of-contents"><ul><li><a href="#ressources-disponibles">Ressources disponibles :</a></li><li><a href="#mise-en-situation">Mise en situation</a></li><li><a href="#utiliser-l-interface">Utiliser l&#39;interface</a></li><li><a href="#utiliser-la-classe-compte-en-ligne">Utiliser la classe Compte en ligne</a></li><li><a href="#une-interface-un-contrat">Une Interface = Un Contrat</a></li><li><a href="#l-implementation-multiple">L&#39;implémentation multiple</a></li></ul></nav></details><p>Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des Interfaces PHP. Les interfaces sont un élément important de la programmation-objet, pour rappel les Interfaces sont un type des classes abstraites (instanciation impossible), elles vont :</p><ul><li>Va d&#39;écrire un comportement.</li><li>Définir les signatures des méthodes et propriétés</li><li>Garantir au code qui fait l&#39;appel que la méthode existera.</li></ul><p>C&#39;est donc un contrat que la classe doit respecter si elle implémente l&#39;interface, si celle-ci implémente une Interface, elle devra forcément avoir l&#39;ensemble des méthodes « décrite » dans l&#39;interface.</p><h2 id="ressources-disponibles" tabindex="-1">Ressources disponibles : <a class="header-anchor" href="#ressources-disponibles" aria-label="Permalink to &quot;Ressources disponibles :&quot;">​</a></h2><ul><li><a href="/cheatsheets/poo/">Aide mémoire POO</a></li><li><a href="/cheatsheets/poo-uml/">Aide mémoire POO-UML</a></li><li><a href="/cours/poo.html">Cours POO</a></li></ul><div class="tip custom-block"><p class="custom-block-title">Définition</p><p>Une interface ressemble à une classe abstraite dans laquelle aucune méthode ne serait implémentée.</p><ul><li>Ne contiens que des méthodes publiques.</li><li>Ne contiens aucun code.</li><li>N&#39;est pas instanciable.</li><li>Son « un contrat » que les classes filles devront <strong>implémenter</strong>.</li></ul></div><h2 id="mise-en-situation" tabindex="-1">Mise en situation <a class="header-anchor" href="#mise-en-situation" aria-label="Permalink to &quot;Mise en situation&quot;">​</a></h2><p><img src="'+t+`" alt="UML" loading="lazy"></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declaration de l&#39;interface &#39;Compte&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Compte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deposer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($montant);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> retirer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($montant);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getBalance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Une Interface est définie avec le mot clé :</li><li>Identifier les particularités de la classe <code>Compte</code><ul><li><strong>Particularité 1 :</strong></li><li><strong>Particularité 2 :</strong></li><li><strong>Particularité 3 :</strong></li></ul></li><li>Selon vous, pourquoi la classe ne possède-t-elle pas de constructeur ?</li></ul></div><h2 id="utiliser-l-interface" tabindex="-1">Utiliser l&#39;interface <a class="header-anchor" href="#utiliser-l-interface" aria-label="Permalink to &quot;Utiliser l&#39;interface&quot;">​</a></h2><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompteEnLigne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Compte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Quel nouveau mot clé avons-nous dans l&#39;exemple ci-dessus ?</li><li>Écrire le reste du code en suivant l&#39;UML proposé.</li></ul></div><h2 id="utiliser-la-classe-compte-en-ligne" tabindex="-1">Utiliser la classe Compte en ligne <a class="header-anchor" href="#utiliser-la-classe-compte-en-ligne" aria-label="Permalink to &quot;Utiliser la classe Compte en ligne&quot;">​</a></h2><p>Je souhaite créer <strong>1 compte</strong>, et effectuer les opérations suivantes :</p><ul><li><code>$operations = [100, 2000, 5000, -100, -1000, 0, -300]</code></li><li>Utiliser le tableau <code>$operations</code> via <strong>une boucle</strong> pour manipuler le compte.</li><li>Afficher à la fin le solde du compte.</li></ul><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Indiquez pourquoi je vous propose de passer par un tableau d&#39;opération ?</li></ul></div><h2 id="une-interface-un-contrat" tabindex="-1">Une Interface = Un Contrat <a class="header-anchor" href="#une-interface-un-contrat" aria-label="Permalink to &quot;Une Interface = Un Contrat&quot;">​</a></h2><p><img src="`+n+'" alt="UML" loading="lazy"></p><p>En utilisant à nouveau l&#39;Interface, écrire l&#39;implémentation de classe <code>Epargne</code>, celle-ci doit fonctionner :</p><ul><li>N&#39;autoriser que les dépôts &gt; 200€.</li><li>Avoir un constructeur avec une valeur de base du compte.</li><li>Ne pas autoriser un retrait si le compte ne possède pas &gt; 1000€</li></ul><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Pourquoi, dans ce cas-ci, une Interface est utile ?</li><li>Les langages de programmation proposent une instruction <code>instanceOf</code>¹, en quoi cette instruction peut-être utile ici ?</li></ul></div><p>¹ <code>instanceOf</code> est utilisé pour déterminer si une variable PHP est un objet instancié d&#39;une certaine classe.</p><h2 id="l-implementation-multiple" tabindex="-1">L&#39;implémentation multiple <a class="header-anchor" href="#l-implementation-multiple" aria-label="Permalink to &quot;L&#39;implémentation multiple&quot;">​</a></h2><p><img src="'+l+'" alt="UML" loading="lazy"></p><p>✋ Une classe peu implémenter plusieurs Interfaces</p><p>La définition de la classe comporte alors le mot clé <code>implements</code> suivi d&#39;une liste de noms d&#39;interfaces (les noms des interfaces implantées y sont séparés par une virgule).</p><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Quel sera l&#39;impact sur la classe <code>CompteEnLigne</code> ?</li><li>Quel est l&#39;intérêt d&#39;implémenter plusieurs interfaces ?</li></ul></div>',30),c=[o];function p(u,d,m,h,k,b){return i(),s("div",null,c)}const v=e(r,[["render",p]]);export{g as __pageData,v as default};
