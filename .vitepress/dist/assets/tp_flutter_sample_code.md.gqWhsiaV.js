import{_ as i,c as a,o as e,U as s,k as n}from"./chunks/framework.aGaNZw_P.js";const l="/assets/bottombar.DgE4ZJmW.jpg",y=JSON.parse('{"title":"Flutter, une liste et une API REST","description":"","frontmatter":{},"headers":[],"relativePath":"tp/flutter/sample_code.md","filePath":"tp/flutter/sample_code.md","lastUpdated":1681406959000}'),t={name:"tp/flutter/sample_code.md"},p=s('<h1 id="flutter-une-liste-et-une-api-rest" tabindex="-1">Flutter, une liste et une API REST <a class="header-anchor" href="#flutter-une-liste-et-une-api-rest" aria-label="Permalink to &quot;Flutter, une liste et une API REST&quot;">​</a></h1><p>Cet exemple montre comment utiliser Flutter pour créer une application récupérant des données via une API REST.</p><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#presentation">Présentation</a></li><li><a href="#prerequis">Prérequis</a></li><li><a href="#installation-de-flutter">Installation de flutter</a></li><li><a href="#recuperation-du-code">Récupération du code</a><ul><li><a href="#installation-des-dependances">Installation des dépendances</a></li><li><a href="#lancement-de-l-application">Lancement de l&#39;application</a></li></ul></li><li><a href="#le-but-du-code">Le but du code</a></li><li><a href="#organisation-du-code">Organisation du code</a></li><li><a href="#les-tabs">Les tabs</a></li><li><a href="#le-routeur">Le routeur</a></li><li><a href="#l-appel-a-l-api">L&#39;appel à l&#39;API</a></li><li><a href="#les-modeles-de-donnees">Les modèles de données</a></li><li><a href="#l-authentification">L&#39;authentification</a><ul><li><a href="#l-api-de-l-authentification">L&#39;API de l&#39;authentification</a></li></ul></li></ul></nav></details><h2 id="presentation" tabindex="-1">Présentation <a class="header-anchor" href="#presentation" aria-label="Permalink to &quot;Présentation&quot;">​</a></h2><p>L&#39;application affiche une liste de films récupérés via une API REST. Lorsque l&#39;on clique sur un élément de la liste, on accède à une page détaillée de l&#39;élément (affichage d&#39;une image).</p>',5),r=n("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/RgxA8u-oMBw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),h=s('<h2 id="prerequis" tabindex="-1">Prérequis <a class="header-anchor" href="#prerequis" aria-label="Permalink to &quot;Prérequis&quot;">​</a></h2><p>Pour pouvoir utiliser cet exemple, vous devez avoir installé Flutter sur votre machine.</p><h2 id="installation-de-flutter" tabindex="-1">Installation de flutter <a class="header-anchor" href="#installation-de-flutter" aria-label="Permalink to &quot;Installation de flutter&quot;">​</a></h2><p><a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noreferrer">Documentation officielle</a>.</p><p>Vous pouvez utiliser la commande suivante pour vérifier que Flutter est bien installé :</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> doctor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Pas de détail</p><p>Vous avez vu ces étapes lors des cours. Je ne vais donc pas entrer dans le détail de l&#39;installation.</p></div><h2 id="recuperation-du-code" tabindex="-1">Récupération du code <a class="header-anchor" href="#recuperation-du-code" aria-label="Permalink to &quot;Récupération du code&quot;">​</a></h2><p>Le code est disponible à l&#39;adresse suivante : <a href="https://github.com/c4software/flutter-list-sample" target="_blank" rel="noreferrer">c4software/flutter-list-sample</a>.</p><ul><li>Je vous laisse cloner le projet.</li></ul><h3 id="installation-des-dependances" tabindex="-1">Installation des dépendances <a class="header-anchor" href="#installation-des-dependances" aria-label="Permalink to &quot;Installation des dépendances&quot;">​</a></h3><p>Pour installer les dépendances, vous devez lancer la commande suivante :</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lancement-de-l-application" tabindex="-1">Lancement de l&#39;application <a class="header-anchor" href="#lancement-de-l-application" aria-label="Permalink to &quot;Lancement de l&#39;application&quot;">​</a></h3><p>Puis vous pouvez lancer l&#39;application via la commande suivante :</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Être dans le bon répertoire</p><p>Évidemment, vous devez être dans le bon répertoire pour lancer l&#39;application.</p></div><h2 id="le-but-du-code" tabindex="-1">Le but du code <a class="header-anchor" href="#le-but-du-code" aria-label="Permalink to &quot;Le but du code&quot;">​</a></h2><p>L&#39;objectif de ce projet est de présenter une application simple Flutter qui implémente :</p><ul><li>Des tabs pour accéder au contenu.</li><li>Une liste de « Image » en provenance d&#39;une API.</li><li>Une vue de détail.</li></ul><h2 id="organisation-du-code" tabindex="-1">Organisation du code <a class="header-anchor" href="#organisation-du-code" aria-label="Permalink to &quot;Organisation du code&quot;">​</a></h2><p>Le code est organisé de la manière suivante :</p><ul><li><code>lib/</code> : contient le code source de l&#39;application <ul><li><code>main.dart</code> : point d&#39;entrée de l&#39;application.</li><li><code>data/models/</code> : contient les modèles de données.</li><li><code>data/services/</code> : contient les services de données (accès à l&#39;API REST).</li><li><code>ui/screens</code> : contient les pages de l&#39;application.</li><li><code>ui/widgets</code> : contient les widgets de l&#39;application.</li></ul></li></ul><div class="danger custom-block"><p class="custom-block-title">Attention</p><p>Tout comme l&#39;approche MVC, l&#39;organisation du code est très importante. il est important de séparer les différentes parties de l&#39;application. Cela permet de mieux comprendre le code et de le maintenir plus facilement.</p><p>Le découpage en Widgets, Screens et Services est une approche très courante. C&#39;est une approche que je <strong>vous recommande</strong> d&#39;utiliser pour vos projets.</p></div><h2 id="les-tabs" tabindex="-1">Les tabs <a class="header-anchor" href="#les-tabs" aria-label="Permalink to &quot;Les tabs&quot;">​</a></h2><p>Les tabs sont des éléments permettant de naviguer entre les différentes pages de l&#39;application. Il s&#39;agit d&#39;un élément très courant dans les applications mobiles, elles prennent généralement la forme d&#39;un menu en bas de l&#39;écran.</p><p><img src="'+l+`" alt="Tabs" loading="lazy"></p><p>Ce composant ce nomme une <code>BottomNavigationBar</code>. Il fonctionne de la façon suivante :</p><ul><li>On définit une liste d&#39;éléments. (Les Widgets à afficher dans notre vue, nommés dans mon code <code>_children</code>).</li><li>On définit une <code>BottomNavigationBar</code> qui contient la liste des icônes à afficher.</li><li>On ajoute une variable <code>currentIndex</code> qui permet de définir l&#39;élément actif.</li><li>Le <code>Body</code> de notre <code>Scaffold</code> contient le Widget actif. Il s&#39;agit d&#39;une référence à <code>currentIndex</code> dans la liste des Widgets.</li></ul><p>Vous pouvez voir l&#39;implémentation de ce fonctionnement dans le fichier <a href="https://github.com/c4software/flutter-list-sample/blob/master/lib/ui/screens/home/HomePageTabs.dart" target="_blank" rel="noreferrer"><code>HomePageTabs.dart</code> disponible en cliquant ici</a></p><h2 id="le-routeur" tabindex="-1">Le routeur <a class="header-anchor" href="#le-routeur" aria-label="Permalink to &quot;Le routeur&quot;">​</a></h2><p>Le routeur permet de gérer les différentes pages de l&#39;application. Il permet de définir les différentes routes de l&#39;application et de gérer les transitions entre les pages.</p><p>Le routeur est utilisé dans le fichier <code>HomePageScreen.dart</code> :</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  MaterialPageRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DetailsScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Dans cet exemple, on utilise la méthode <code>push</code> pour ajouter une nouvelle page à la pile de navigation. La méthode <code>push</code> prend en paramètre un <code>MaterialPageRoute</code> qui permet de définir la page à ajouter à la pile de navigation.</p><p><code>DetailsScreen</code> est l&#39;écran qui sera affiché. On lui passe en paramètre l&#39;image à afficher. Il s&#39;agit de l&#39;élément sur lequel l&#39;utilisateur a cliqué.</p><h2 id="l-appel-a-l-api" tabindex="-1">L&#39;appel à l&#39;API <a class="header-anchor" href="#l-appel-a-l-api" aria-label="Permalink to &quot;L&#39;appel à l&#39;API&quot;">​</a></h2><p>L&#39;appel à l&#39;API se fait dans le fichier <code>Api.dart</code> :</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Future</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">baseUrl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/photos&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>On utilise la librairie <code>http</code> pour faire l&#39;appel à l&#39;API. On utilise la méthode <code>get</code> pour récupérer les données. On passe en paramètre l&#39;URL de l&#39;API. La méthode <code>get</code> retourne un <code>Future</code> qui contient les données récupérées, celle-ci est traitée dans le fichier <code>HomePageScreen.dart</code> :</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Appel à l&#39;API pour récupérer les données</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Traitement des données</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // On utilise la librairie json pour parser les données</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      Iterable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.body);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // On met à jour l&#39;état de l&#39;application</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((model) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On transforme les données en modèle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On met à jour l&#39;état de chargement à false pour cacher le loader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // En cas d&#39;erreur on lève une exception</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Erreur récupération des données&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>On utilise la méthode <code>setState</code> pour mettre à jour l&#39;état de l&#39;application. Cela permet de rafraichir l&#39;affichage de l&#39;application, et de mettre à jour les données affichées.</p><div class="tip custom-block"><p class="custom-block-title">Asynchrone</p><p>L&#39;appel à l&#39;API est asynchrone. Cela signifie que l&#39;application ne va pas attendre la réponse de l&#39;API pour continuer son exécution. Cela permet d&#39;avoir une application plus fluide, mais ça veux dire aussi que vous allez devoir gérer une vue de chargement / une vue d&#39;attente.</p><p>Vous pouvez voir l&#39;implémentation de ce fonctionnement dans le fichier <a href="https://github.com/c4software/flutter-list-sample/blob/master/lib/ui/screens/home/tabs/ListTab.dart" target="_blank" rel="noreferrer"><code>HomePageScreen.dart</code> disponible en cliquant ici</a></p></div><h2 id="les-modeles-de-donnees" tabindex="-1">Les modèles de données <a class="header-anchor" href="#les-modeles-de-donnees" aria-label="Permalink to &quot;Les modèles de données&quot;">​</a></h2><p>Les modèles de données sont des classes qui permettent de représenter les données de l&#39;application. Dans mon cas, j&#39;ai créé une classe <code>ImageData</code> qui représente une image.</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Modèle de données pour les images provenant de l&#39;API.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thumbnailUrl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.title, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.thumbnailUrl);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        thumbnailUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thumbnailUrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Map</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thumbnailUrl&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thumbnailUrl};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Un modèle de données est une classe qui contient des propriétés. Dans mon cas, j&#39;ai créé une classe <code>ImageData</code> qui contient les propriétés suivantes :</p><ul><li><code>id</code> : l&#39;identifiant de l&#39;image.</li><li><code>title</code> : le titre de l&#39;image.</li><li><code>url</code> : l&#39;URL de l&#39;image.</li><li><code>thumbnailUrl</code> : l&#39;URL de la miniature de l&#39;image.</li></ul><p>Les données récupérées depuis l&#39;API sont des données au format JSON. Pour pouvoir les utiliser dans notre application, il faut les transformer en modèle de données. C&#39;est ce que fait la méthode <code>fromJson</code> :</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        thumbnailUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thumbnailUrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Cette méthode permet de créer un objet <code>ImageData</code> à partir d&#39;un objet <code>Map</code> qui contient les données au format clé / valeur (résultat du découpage JSON).</p><p><strong>Bien évidemment, il faut que les clés de l&#39;objet <code>Map</code> correspondent aux propriétés de l&#39;objet <code>ImageData</code>.</strong></p><h2 id="l-authentification" tabindex="-1">L&#39;authentification <a class="header-anchor" href="#l-authentification" aria-label="Permalink to &quot;L&#39;authentification&quot;">​</a></h2><p>Dans le projet vous avez un exemple d&#39;authentification avec un formulaire. Le formulaire est composé de deux champs :</p><ul><li><code>username</code> : le nom d&#39;utilisateur.</li><li><code>password</code> : le mot de passe.</li></ul><p>Le code est dans le fichier <a href="https://github.com/c4software/flutter-list-sample/blob/master/lib/ui/screens/home/tabs/LoginTab.dart" target="_blank" rel="noreferrer"><code>lib/ui/scroons/home/tabs/LoginTab.dart</code></a>. Il est composé des éléments suivants :</p><ul><li>LoginTab : la classe qui représente le formulaire d&#39;authentification.</li><li>FormAuthWidget : le widget qui représente le formulaire d&#39;authentification. (avec les champs et le bouton de validation).</li><li>AuthUserInformationWidget : le widget qui représente les informations de l&#39;utilisateur connecté.</li></ul><p>Les actions sont réalisés via des <code>Callback</code> (<code>onLogin</code> et <code>onLogout</code>, …).</p><h3 id="l-api-de-l-authentification" tabindex="-1">L&#39;API de l&#39;authentification <a class="header-anchor" href="#l-api-de-l-authentification" aria-label="Permalink to &quot;L&#39;API de l&#39;authentification&quot;">​</a></h3><p>Une méthode <code>login</code> est définie dans le fichier <a href="https://github.com/c4software/flutter-list-sample/blob/master/lib/data/services/api.dart" target="_blank" rel="noreferrer"><code>lib/data/services/api.dart</code></a>, il s&#39;agit de l&#39;API qui permet de se connecter. Cette API retourne un objet de type <code>LoginData</code> qui contient les informations de l&#39;utilisateur connecté.</p><ul><li>id : l&#39;identifiant de l&#39;utilisateur.</li><li>email : l&#39;email de l&#39;utilisateur.</li><li>firstName : le prénom de l&#39;utilisateur.</li><li>lastName : le nom de l&#39;utilisateur.</li></ul><p>Cette API est appelée dans le fichier <code>lib/ui/screens/home/tabs/LoginTab.dart</code> lors de la validation du formulaire.</p><p>La méthode est asynchrone, elle retourne un <code>Future</code> qui contient les données de l&#39;utilisateur connecté, le code de la fonction est le suivant :</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Fonction appelée lors de la connexion</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Elle appelle l&#39;API pour se connecter</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Si la connexion est réussie, on affiche les informations de l&#39;utilisateur</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_username, _password).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((response) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LoginData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.body));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Je vous laisse regarder l&#39;ensemble du code</p><p>Pour comprendre le fonctionnement de l&#39;authentification, je vous invite à regarder le code disponible dans le projet GitHub.</p></div>`,65),d=[p,r,h];function o(k,c,u,E,g,m){return e(),a("div",null,d)}const F=i(t,[["render",o]]);export{y as __pageData,F as default};
