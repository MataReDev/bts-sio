import{_ as e,c as s,o as a,U as i}from"./chunks/framework.aGaNZw_P.js";const n="/assets/docker-hello-world.Eb8NuKcD.png",r="/assets/docker-containers.DEn1gt-R.jpg",g=JSON.parse('{"title":"Déployer Docker sur un serveur","description":"Docker est un outil qui permet de déployer des applications dans des conteneurs, dans ce TP nous allons voir comment déployer une application dans un conteneur Docker sur un serveur.","frontmatter":{"description":"Docker est un outil qui permet de déployer des applications dans des conteneurs, dans ce TP nous allons voir comment déployer une application dans un conteneur Docker sur un serveur."},"headers":[],"relativePath":"tp/docker/deployer-docker-sur-un-serveur.md","filePath":"tp/docker/deployer-docker-sur-un-serveur.md","lastUpdated":1680190460000}'),l={name:"tp/docker/deployer-docker-sur-un-serveur.md"},t=i(`<h1 id="deployer-docker-sur-un-serveur" tabindex="-1">Déployer Docker sur un serveur <a class="header-anchor" href="#deployer-docker-sur-un-serveur" aria-label="Permalink to &quot;Déployer Docker sur un serveur&quot;">​</a></h1><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#objectifs">Objectifs</a></li><li><a href="#preparer-votre-serveur">Préparer votre serveur</a></li><li><a href="#installer-docker">Installer Docker</a></li><li><a href="#configurer-docker">Configurer Docker</a></li><li><a href="#verifier-que-docker-fonctionne">Vérifier que Docker fonctionne</a></li><li><a href="#lancer-un-serveur-mysql-mariadb">Lancer un serveur MySQL / MariaDB</a><ul><li><a href="#choisir-une-version">Choisir une version</a></li><li><a href="#les-volumes">Les volumes</a></li><li><a href="#exposer-le-port-3306">Exposer le port 3306</a></li><li><a href="#point-etape">Point étape !</a></li></ul></li><li><a href="#lancer-un-serveur-apache-php">Lancer un serveur Apache + PHP</a><ul><li><a href="#choisir-une-version-1">Choisir une version</a></li><li><a href="#lancer-le-conteneur">Lancer le conteneur</a></li></ul></li><li><a href="#creer-un-docker-compose-pour-lancer-les-deux-serveurs">Créer un docker compose pour lancer les deux serveurs</a><ul><li><a href="#arreter-les-conteneurs-precedents">Arrêter les conteneurs précédents</a></li><li><a href="#creer-un-fichier-docker-compose-yml">Créer un fichier docker-compose.yml</a></li><li><a href="#lancer-votre-stack">Lancer votre stack</a></li><li><a href="#les-logs">Les logs</a></li><li><a href="#arreter-la-stack">Arrêter la stack</a></li></ul></li><li><a href="#c-est-a-vous-le-cas-de-redmine">C&#39;est à vous, le cas de Redmine</a></li><li><a href="#un-autre-exemple">Un autre exemple</a><ul><li><a href="#creer-un-fichier-docker-compose-yml-1">Créer un fichier docker-compose.yml</a></li></ul></li><li><a href="#apache-php-mysql">Apache + PHP + MySQL</a></li><li><a href="#conclusion">Conclusion</a></li></ul></nav></details><h2 id="objectifs" tabindex="-1">Objectifs <a class="header-anchor" href="#objectifs" aria-label="Permalink to &quot;Objectifs&quot;">​</a></h2><p>Dans ce TP nous allons voir comment utiliser Docker sur un serveur pour rendre une application disponible sur le réseau.</p><p>Il est possible de travailler de plusieurs façons différentes avec Docker :</p><ul><li>Utiliser une image Docker disponible sur le Docker Hub (exemple Mysql).</li><li>Créer une image Docker à partir d&#39;un Dockerfile.</li><li>Utiliser une image générique (type PHP), et la personnaliser grâce à un volume.</li><li>Construire une image Docker via l&#39;intégration continue (CI/CD), avec Gitlab par exemple pour la déployer sur un serveur.</li></ul><div class="tip custom-block"><p class="custom-block-title">Et en entreprise ?</p><p>Ici il s&#39;agit d&#39;une introduction à Docker, nous allons donc rester simples. Mais dans la vraie vie, nous réalisons le plus souvent la construction d&#39;une image Docker via l&#39;intégration continue (CI/CD), avec Gitlab par exemple pour la déployer sur un serveur.</p></div><h2 id="preparer-votre-serveur" tabindex="-1">Préparer votre serveur <a class="header-anchor" href="#preparer-votre-serveur" aria-label="Permalink to &quot;Préparer votre serveur&quot;">​</a></h2><p>La première étape est de préparer votre serveur. Pour cela, vous devez :</p><ul><li>Créer une machine virtuelle Debian 11.5.0 (64 bits) avec 2Go de RAM et 20Go de disque. (Vous pouvez utiliser le modèle <a href="/tp/devops/serveur/tp1alt.html">Debian 11</a> pour créer votre machine virtuelle).</li><li>Ajouter les dépôts de Docker sur votre machine virtuelle.</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ajout des éléments nécessaire à l&#39;installation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ca-certificates</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    gnupg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    lsb-release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ajout du dépôt permettant d&#39;installer Docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0755</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/keyrings</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.docker.com/linux/debian/gpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dearmor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;deb [arch=&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dpkg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-architecture</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian &quot;$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/os-release &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VERSION_CODENAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)&quot; stable&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list.d/docker.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Ici nous ajoutons les dépôts de Docker sur notre machine virtuelle.</p><div class="tip custom-block"><p class="custom-block-title">D&#39;où viennent ces commandes ?</p><p>Ces commandes sont tirées de la documentation officielle de Docker : <a href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/install/debian/</a>. Et oui, comme dans le code, lire la documentation est une bonne pratique !</p></div><h2 id="installer-docker" tabindex="-1">Installer Docker <a class="header-anchor" href="#installer-docker" aria-label="Permalink to &quot;Installer Docker&quot;">​</a></h2><p>Maintenant que nous avons ajouté les dépôts de Docker sur notre machine virtuelle, nous pouvons installer Docker.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd.io</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-buildx-plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose-plugin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Nous installons ici Docker, Docker Compose, Docker Buildx et Docker Compose. Il s&#39;agit de tous les outils nécessaires pour travailler avec Docker de manière simple. Rappel le <code>-y</code> permet de répondre automatiquement &quot;oui&quot; à toutes les questions.</p><p>À partir de maintenant, nous pouvons utiliser Docker sur notre machine virtuelle, par contre nous devons être connecté en tant que <code>root</code> pour pouvoir utiliser Docker. Pour éviter cela, nous allons ajouter notre utilisateur au groupe <code>docker</code>.</p><h2 id="configurer-docker" tabindex="-1">Configurer Docker <a class="header-anchor" href="#configurer-docker" aria-label="Permalink to &quot;Configurer Docker&quot;">​</a></h2><p>Docker ne demande pas particulièrement de configuration, mais il est possible de configurer Docker pour qu&#39;il fonctionne de manière optimale. Ce qui est intéressant avec Docker c&#39;est que nous pouvons le configurer pour que celui-ci fonctionne avec notre utilisateur et non pas avec <code>root</code>.</p><p>Pour cela, nous allons ajouter notre utilisateur au groupe <code>docker</code>.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Vous devez être root</p><p>Rappel, pour ajouter un utilisateur au groupe <code>docker</code> vous devez être connecté en tant que <code>root</code>. Une fois que vous avez ajouté votre utilisateur au groupe <code>docker</code>, vous pouvez vous déconnecter et vous reconnecter avec votre utilisateur.</p></div><h2 id="verifier-que-docker-fonctionne" tabindex="-1">Vérifier que Docker fonctionne <a class="header-anchor" href="#verifier-que-docker-fonctionne" aria-label="Permalink to &quot;Vérifier que Docker fonctionne&quot;">​</a></h2><p>Pour vérifier que Docker fonctionne, nous allons lancer un conteneur Docker.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Ce conteneur va nous afficher un message de bienvenue, et nous indiquer que Docker fonctionne correctement. C&#39;est le cas ? Si oui, vous pouvez passer à la suite.</p><p><img src="`+n+'" alt="Docker Hello World" loading="lazy"></p><h2 id="lancer-un-serveur-mysql-mariadb" tabindex="-1">Lancer un serveur MySQL / MariaDB <a class="header-anchor" href="#lancer-un-serveur-mysql-mariadb" aria-label="Permalink to &quot;Lancer un serveur MySQL / MariaDB&quot;">​</a></h2><p>Lancer un Hello World c&#39;est bien, mais lancer un serveur MySQL c&#39;est mieux. Nous allons donc voir comment lancer un serveur MySQL dans un conteneur Docker. Je vous rappelle que l&#39;idée de docker est de pouvoir créer des conteneurs répétables, et donc de pouvoir lancer plusieurs fois le même conteneur.</p><p>Et même, plus que ça, nous pouvons lancer sur notre serveur plusieurs versions du même service, par exemple MySQL 5.7 et MySQL 8.0. Est-ce une bonne idée ? À vous d&#39;en juger… mais c&#39;est possible !</p><p><img src="'+r+`" alt="Docker" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">Dans cette image</p><p>Dans cette image, vous pouvez voir comment fonctionne docker. Il s&#39;agit de plusieurs petites applications (<strong>cloisonnées</strong>) qui vont fonctionner au-dessus de votre serveur. Ces applications sont appelées des <strong>conteneurs</strong>.</p></div><h3 id="choisir-une-version" tabindex="-1">Choisir une version <a class="header-anchor" href="#choisir-une-version" aria-label="Permalink to &quot;Choisir une version&quot;">​</a></h3><p>Maintenant que votre environnement Docker est prêt, nous allons pouvoir lancer un serveur MariaDB. Pour cela, nous allons utiliser l&#39;image Docker <a href="https://hub.docker.com/_/mariadb" target="_blank" rel="noreferrer">MariaDB</a>.</p><div class="tip custom-block"><p class="custom-block-title">Docker Hub ?</p><p>Pour faire simple, Docker Hub est un dépôt d&#39;images Docker. Vous pouvez y trouver des images Docker pour toutes sortes de services. Vous pouvez également y publier vos propres images Docker. L&#39;avantage du Docker Hub c&#39;est que vous pouvez lancer un conteneur Docker en une seule commande, sans avoir à construire l&#39;image Docker. De plus, certaines images (comme MariaDB) sont validées par Docker, ce qui garantit que l&#39;image est sécurisée et fonctionnelle.</p></div><p>Je vous propose de lancer la dernière version de MariaDB, nous allons donc utiliser l&#39;image <code>mariadb:latest</code>. Vous pouvez également choisir une version spécifique, par exemple <code>mariadb:10.5</code>. Dans notre cas :</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3306</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/mysql-data:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MARIADB_USER=example-user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MARIADB_PASSWORD=my_cool_secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MARIADB_ROOT_PASSWORD=my-secret-pw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mariadb:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Quelques explications sur cette commande :</p><ul><li><code>docker run</code> : permet de lancer un conteneur Docker</li><li><code>-d</code> : permet de lancer le conteneur en mode détaché, c&#39;est-à-dire que le conteneur va tourner en arrière plan</li><li><code>-p 3306:3306</code> : permet de définir un port de redirection. Dans notre cas, nous redirigeons le port <code>3306</code> de notre machine virtuelle vers le port <code>3306</code> du conteneur.</li><li><code>-v ./mysql-data:/var/lib/mysql</code> : permet de définir un volume. Dans notre cas, nous définissons un volume qui va permettre de sauvegarder les données de la base de données. Ce volume est lié au dossier <code>mysql-data</code> de notre machine virtuelle.</li><li><code>--name mariadb</code> : permet de donner un nom au conteneur</li><li><code>--env MARIADB_USER=example-user</code> : permet de définir une variable d&#39;environnement pour le conteneur. Dans notre cas, nous définissons l&#39;utilisateur de la base de données.</li><li><code>--env MARIADB_PASSWORD=my_cool_secret</code> : permet de définir une variable d&#39;environnement pour le conteneur. Dans notre cas, nous définissons le mot de passe de l&#39;utilisateur de la base de données.</li><li><code>MARIADB_ROOT_PASSWORD=my-secret-pw</code> : permet de définir une variable d&#39;environnement pour le conteneur. Dans notre cas, nous définissons le mot de passe de l&#39;utilisateur <code>root</code> de la base de données.</li><li><code>mariadb:latest</code> : permet de définir l&#39;image Docker à utiliser pour le conteneur.</li></ul><div class="danger custom-block"><p class="custom-block-title">N&#39;oubliez pas le mot de passe</p><p>N&#39;oubliez pas de changer les mots de passe.</p></div><h3 id="les-volumes" tabindex="-1">Les volumes <a class="header-anchor" href="#les-volumes" aria-label="Permalink to &quot;Les volumes&quot;">​</a></h3><p>En cours nous avons vu qu&#39;un conteneur Docker est dit <code>stateless</code>, c&#39;est-à-dire qu&#39;il sera supprimé à la fin de son utilisation. C&#39;est bien, mais cela veut dire que nous allons perdre toutes les données de notre base de données à la fin de l&#39;utilisation du conteneur.</p><p>Bien évidemment, nous ne voulons pas perdre nos données, nous allons donc utiliser un volume. Un volume est un dossier qui est lié à un conteneur Docker. Ce dossier est lié à un dossier de notre machine virtuelle. Ainsi, lorsque nous supprimons le conteneur, le dossier du volume est conservé. Lorsque nous relançons le conteneur, le dossier du volume est utilisé. Pratique, non ?</p><h3 id="exposer-le-port-3306" tabindex="-1">Exposer le port 3306 <a class="header-anchor" href="#exposer-le-port-3306" aria-label="Permalink to &quot;Exposer le port 3306&quot;">​</a></h3><p>Par défaut, le port 3306 n&#39;est pas accessible. En effet, les conteneurs Docker sont isolés par défaut. Pour pouvoir accéder à notre base de données, nous allons donc devoir exposer le port 3306 de notre conteneur. C&#39;est ce que nous faisons avec l&#39;option <code>-p 3306:3306</code>.</p><p>Maintenant que votre conteneur est lancé, vous pouvez vous connecter à votre base de données. Pour cela, vous pouvez utiliser un client MySQL comme <a href="https://dbeaver.io/" target="_blank" rel="noreferrer">DBeaver</a> ou <a href="https://www.jetbrains.com/fr-fr/datagrip/" target="_blank" rel="noreferrer">DataGrip</a>.</p><p>Et pourquoi pas PHPMyAdmin ? C&#39;est possible, mais nous allons voir comment lancer un serveur PHP dans un conteneur Docker.</p><h3 id="point-etape" tabindex="-1">Point étape ! <a class="header-anchor" href="#point-etape" aria-label="Permalink to &quot;Point étape !&quot;">​</a></h3><p>Et voilà, vous avez maintenant un serveur de base de données. Celui-ci est équivalent à celui que vous auriez pu installer via les dépôts de votre distribution. La grande différence c&#39;est que vous pouvez lancer plusieurs versions de MariaDB sur la même machine, et que vous pouvez lancer plusieurs conteneurs sur la même machine. Et surtout, nous pouvons choisir une version précise simplement, et sans même ajouter de dépôts sur notre serveur.</p><p>Autre avantage, avec docker, vous pouvez créer un environnement similaire entre votre machine de développement et votre serveur de production. Vous pouvez ainsi avoir une base de données identique sur votre machine de développement et sur votre serveur de production.</p><h2 id="lancer-un-serveur-apache-php" tabindex="-1">Lancer un serveur Apache + PHP <a class="header-anchor" href="#lancer-un-serveur-apache-php" aria-label="Permalink to &quot;Lancer un serveur Apache + PHP&quot;">​</a></h2><p>Une base de données sans serveur web, c&#39;est dommage… Regardons comment nous pouvons lancer un conteneur PHPMyAdmin grâce à Docker.</p><h3 id="choisir-une-version-1" tabindex="-1">Choisir une version <a class="header-anchor" href="#choisir-une-version-1" aria-label="Permalink to &quot;Choisir une version&quot;">​</a></h3><p>Comme pour MariaDB, nous allons nous rendre sur le Docker Hub pour trouver une image de PHPMyAdmin. Nous allons utiliser l&#39;image <a href="https://hub.docker.com/_/phpmyadmin" target="_blank" rel="noreferrer">PHPMyAdmin</a>.</p><h3 id="lancer-le-conteneur" tabindex="-1">Lancer le conteneur <a class="header-anchor" href="#lancer-le-conteneur" aria-label="Permalink to &quot;Lancer le conteneur&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phpmyadmin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phpmyadmin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Quelques explications sur cette commande :</p><ul><li><code>docker run</code> : permet de lancer un conteneur Docker</li><li><code>-d</code> : permet de lancer le conteneur en mode détaché, c&#39;est-à-dire que le conteneur va tourner en arrière plan</li><li><code>-p 8080:80</code> : permet de définir un port de redirection. Dans notre cas, nous redirigeons le port <code>8080</code> de notre machine virtuelle vers le port <code>80</code> du conteneur.</li><li><code>--name phpmyadmin</code> : permet de donner un nom au conteneur</li><li><code>phpmyadmin</code> : permet de définir l&#39;image Docker à utiliser pour le conteneur.</li></ul><p>Je vous laisse tester le serveur PHPMyAdmin en vous connectant à l&#39;adresse <code>http://&lt;ip.de.votre.serveur&gt;:8080</code>.</p><h2 id="creer-un-docker-compose-pour-lancer-les-deux-serveurs" tabindex="-1">Créer un docker compose pour lancer les deux serveurs <a class="header-anchor" href="#creer-un-docker-compose-pour-lancer-les-deux-serveurs" aria-label="Permalink to &quot;Créer un docker compose pour lancer les deux serveurs&quot;">​</a></h2><p>Nous avons vu comment lancer un conteneur Docker de manière unitaire, c&#39;est pratique, mais ce que nous voulons c&#39;est lancer un ensemble de conteneurs Docker. L&#39;objectif étant de créer une architecture, que nous pourrons lancer très rapidement, et qui sera répétable.</p><h3 id="arreter-les-conteneurs-precedents" tabindex="-1">Arrêter les conteneurs précédents <a class="header-anchor" href="#arreter-les-conteneurs-precedents" aria-label="Permalink to &quot;Arrêter les conteneurs précédents&quot;">​</a></h3><p>Dans un premier temps je vous propose d&#39;arrêter l&#39;ensemble de conteneurs que nous avons lancé précédemment.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Arrêt des conteneurs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phpmyadmin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Suppression</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phpmyadmin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="creer-un-fichier-docker-compose-yml" tabindex="-1">Créer un fichier docker-compose.yml <a class="header-anchor" href="#creer-un-fichier-docker-compose-yml" aria-label="Permalink to &quot;Créer un fichier docker-compose.yml&quot;">​</a></h3><p>Dans le dossier de votre choix, je vous laisse créer un fichier <code>docker-compose.yml</code>. Ce fichier va nous permettre de définir l&#39;ensemble des conteneurs que nous allons lancer.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Nous allons maintenant définir l&#39;ensemble des conteneurs que nous allons lancer. Pour cela, nous allons utiliser la syntaxe YAML.</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.7&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mariadb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MARIADB_USER=example-user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MARIADB_PASSWORD=my_cool_secret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MARIADB_ROOT_PASSWORD=my-secret-pw</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/mysql-data:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3306:3306</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  phpmyadmin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">phpmyadmin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">phpmyadmin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PMA_HOST=mariadb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PMA_PORT=3306</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8080:80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Je vous propose de regarder le fichier <code>docker-compose.yml</code> ligne par ligne, nous allons le faire ensemble.</p><h3 id="lancer-votre-stack" tabindex="-1">Lancer votre stack <a class="header-anchor" href="#lancer-votre-stack" aria-label="Permalink to &quot;Lancer votre stack&quot;">​</a></h3><p>Maintenant que nous avons défini notre stack, nous allons pouvoir la lancer.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="les-logs" tabindex="-1">Les logs <a class="header-anchor" href="#les-logs" aria-label="Permalink to &quot;Les logs&quot;">​</a></h3><p>Comme pour un serveur classique, nous pouvons consulter les logs de nos conteneurs.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Cette commande va nous permettre de consulter les logs de nos conteneurs. Nous pouvons également consulter les logs d&#39;un conteneur en particulier.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="arreter-la-stack" tabindex="-1">Arrêter la stack <a class="header-anchor" href="#arreter-la-stack" aria-label="Permalink to &quot;Arrêter la stack&quot;">​</a></h3><p>Pour arrêter la stack, nous allons utiliser la commande <code>docker-compose down</code>.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="c-est-a-vous-le-cas-de-redmine" tabindex="-1">C&#39;est à vous, le cas de Redmine <a class="header-anchor" href="#c-est-a-vous-le-cas-de-redmine" aria-label="Permalink to &quot;C&#39;est à vous, le cas de Redmine&quot;">​</a></h2><p>En reprenant le fonctionnement précédent, je vous propose de créer un nouveau service sur votre serveur. Celui-ci devra être un serveur Redmine. Je vous laisse chercher comment faire. Une piste :</p><ul><li><a href="https://hub.docker.com/_/redmine" target="_blank" rel="noreferrer">Redmine</a></li></ul><h2 id="un-autre-exemple" tabindex="-1">Un autre exemple <a class="header-anchor" href="#un-autre-exemple" aria-label="Permalink to &quot;Un autre exemple&quot;">​</a></h2><p>Redmine, ce n’est pas forcément très fun… Je vous propose de partir sur un autre usage de Docker, nous allons créer un <a href="https://docs.linuxserver.io/images/docker-emulatorjs" target="_blank" rel="noreferrer"><code>emulatorjs</code></a>.</p><h3 id="creer-un-fichier-docker-compose-yml-1" tabindex="-1">Créer un fichier docker-compose.yml <a class="header-anchor" href="#creer-un-fichier-docker-compose-yml-1" aria-label="Permalink to &quot;Créer un fichier docker-compose.yml&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  emulatorjs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lscr.io/linuxserver/emulatorjs:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emulatorjs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PUID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PGID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TZ=Etc/UTC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SUBFOLDER=/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #optional</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/emulatorjs-config:/config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/emulatorjs-data:/data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3000:3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">9090:80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unless-stopped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Je vous laisse regarder et tester le serveur.</p><h2 id="apache-php-mysql" tabindex="-1">Apache + PHP + MySQL <a class="header-anchor" href="#apache-php-mysql" aria-label="Permalink to &quot;Apache + PHP + MySQL&quot;">​</a></h2><p>Nous allons maintenant créer un serveur Apache + PHP + MySQL. Pour ça je vous propose de tenter le déploiement du projet suivant :</p><p><a href="https://gitlab.com/bts-sio-chevrollier/demo-docker-compose" target="_blank" rel="noreferrer">Stack applicatif type AP</a></p><ol><li>Récupérer le projet sur votre serveur.</li><li>Lancer le projet avec la commande <code>docker-compose up -d</code>.</li></ol><p>Je vous laisse regarder le fichier <code>docker-compose.yml</code> et le fichier <code>Dockerfile</code> pour comprendre comment fonctionne ce projet.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Dans ce TP nous avons vu comment Docker facilite la mise en place d&#39;un serveur sur une machine. Nous avons vu comment Docker permet de créer rapidement des infrastructures répétables, et ce quelques soit la version, la configuration, ou l&#39;OS de la machine.</p><p>Nous avons vu également comment Docker Compose permet de lancer plusieurs conteneurs en même temps, et de les lier entre eux (exemple : un serveur MySQL et un serveur PHP).</p>`,98),p=[t];function o(c,u,d,h,k,m){return a(),s("div",null,p)}const b=e(l,[["render",o]]);export{g as __pageData,b as default};
