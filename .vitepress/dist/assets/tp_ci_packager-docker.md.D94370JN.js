import{_ as s,c as a,o as i,U as e}from"./chunks/framework.aGaNZw_P.js";const n="/assets/project_create.CYg3sjbV.png",l="/assets/vite-init.BZwBckBT.png",t="/assets/build-ci.q2cO1V2K.png",p="/assets/docker_build_success.BP7G6w6r.png",r="/assets/docker_builded.Cu9ECly5.png",h="/assets/token.DhyotGpm.png",o="/assets/docker_run.DLbsjmrL.png",C=JSON.parse(`{"title":"Packager une application avec Docker","description":"Nous avons vu précédemment qu'il était possible de compiler, déployer, voire de créer un Artifact (livrable) avec l'intégration continue. Cependant nous pouvons aller bien plus loin, nous pouvons carrément créer un conteneur Docker directement depuis le CI.","frontmatter":{"description":"Nous avons vu précédemment qu'il était possible de compiler, déployer, voire de créer un Artifact (livrable) avec l'intégration continue. Cependant nous pouvons aller bien plus loin, nous pouvons carrément créer un conteneur Docker directement depuis le CI."},"headers":[],"relativePath":"tp/ci/packager-docker.md","filePath":"tp/ci/packager-docker.md","lastUpdated":1640899309000}`),c={name:"tp/ci/packager-docker.md"},k=e('<h1 id="packager-une-application-avec-docker" tabindex="-1">Packager une application avec Docker <a class="header-anchor" href="#packager-une-application-avec-docker" aria-label="Permalink to &quot;Packager une application avec Docker&quot;">​</a></h1><p>Nous avons vu précédemment qu&#39;il était possible de compiler, déployer, voire de créer un Artifact (livrable) avec l&#39;intégration continue. Cependant nous pouvons aller bien plus loin, nous pouvons carrément créer un conteneur Docker directement depuis le CI.</p><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#objectif">Objectif</a></li><li><a href="#creer-un-projet-sur-gitlab">Créer un projet sur Gitlab</a><ul><li><a href="#ajouter-l-application-a-packager">Ajouter l&#39;application à packager</a></li><li><a href="#commiter-pusher-une-premiere-version">Commiter / pusher une première version</a></li></ul></li><li><a href="#ajouter-un-gitlab-ci-yml">Ajouter un gitlab-ci.yml</a><ul><li><a href="#tester">Tester</a></li><li><a href="#dockeriser">Dockeriser</a></li><li><a href="#packager">Packager</a></li></ul></li><li><a href="#tester-depuis-votre-poste-l-image-obtenue">Tester depuis votre poste l&#39;image obtenue</a><ul><li><a href="#vous-connecter">Vous connecter</a></li><li><a href="#lancer-votre-image">Lancer votre image</a></li></ul></li><li><a href="#apporter-des-modifications">Apporter des modifications</a></li><li><a href="#booster-les-performances">Booster les performances</a><ul><li><a href="#image-multi-architectures">Image multi-architectures ?</a></li></ul></li></ul></nav></details><h2 id="objectif" tabindex="-1">Objectif <a class="header-anchor" href="#objectif" aria-label="Permalink to &quot;Objectif&quot;">​</a></h2><p>L&#39;objectif de faire construire une image Docker directement depuis la CI est d&#39;automatiser à 100% le processus de packaging de votre application. Plus d&#39;humain == plus de risque.</p><div class="tip custom-block"><p class="custom-block-title">Plus de risque ?</p><p>Façon de parler évidemment… En sécurité l&#39;humain est source de vulnérabilité « volontaire » et « involontaire ». En automatisant au maximum les opérations de packaging, nous pourrons par la même réduire les risques :</p><ul><li>D&#39;erreurs.</li><li>De corruption du livrable.</li><li>de perte de temps.</li></ul></div><p>La finalité est donc de créer directement depuis le CI le livrable <strong>ici l&#39;image Docker de notre application</strong>. Nous utiliserons Gitlab-ci, mais la même opération est possible maintenant avec <a href="https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages" target="_blank" rel="noreferrer">Github</a>.</p><p>Avec Gitlab ce service s&#39;appelle le <a href="https://docs.gitlab.com/ee/user/packages/container_registry/index.html" target="_blank" rel="noreferrer">Gitlab Container Registry</a>, le service est gratuit et est <strong>intégré</strong> à Gitlab (quelle que soit la version que vous avez). <strong>Bonus</strong> vous avez un registry intégré à chaque projet 👍.</p><h2 id="creer-un-projet-sur-gitlab" tabindex="-1">Créer un projet sur Gitlab <a class="header-anchor" href="#creer-un-projet-sur-gitlab" aria-label="Permalink to &quot;Créer un projet sur Gitlab&quot;">​</a></h2><p>Pour l&#39;instant pas de problème <a href="https://gitlab.com/projects/new" target="_blank" rel="noreferrer">vous savez faire</a>. La première étape est de versionner votre projet sur Gitlab comme habituellement. Je vous laisse créer votre projet, le nom importe peu.</p><p><img src="'+n+'" alt="Project creation" loading="lazy"></p><h3 id="ajouter-l-application-a-packager" tabindex="-1">Ajouter l&#39;application à packager <a class="header-anchor" href="#ajouter-l-application-a-packager" aria-label="Permalink to &quot;Ajouter l&#39;application à packager&quot;">​</a></h3><p>Je vous propose que l&#39;on package une application Web. Bien que l&#39;on puisse packager ce que l&#39;on souhaite (API, Application, Web), je pense que le web est le plus intéressant, car il possède des étapes « de compilation » en amont ; ces étapes peuvent prendre un peu de temps et sont très facilement automatisables.</p><p>Je vous propose de créer un site « fictif » avec ViteJS (VueJS 3), pour ça dans un terminal :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vitejs/app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+l+`" alt="Vite Init" loading="lazy"></p><p>Un projet vide vient d&#39;être créé. Je vous laisse le tester dans un premier temps sur votre ordinateur, dans mon cas</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci-packaging</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Je vous laisse vérifier que tout fonctionne comme attendu !</strong></p><div class="danger custom-block"><p class="custom-block-title">npm, yarn, pnpm ?</p><p>Personnellement j&#39;utilise <code>pnpm</code>, pourquoi ? À cause du dépôt centralisé ; vous souhaitez en savoir plus ? Je suis là 👋</p></div><div class="tip custom-block"><p class="custom-block-title">Vous souhaitez packager autres choses ?</p><p><strong>Aucun problème</strong> je peux vous aider à packager votre site / api / service.</p></div><h3 id="commiter-pusher-une-premiere-version" tabindex="-1">Commiter / pusher une première version <a class="header-anchor" href="#commiter-pusher-une-premiere-version" aria-label="Permalink to &quot;Commiter / pusher une première version&quot;">​</a></h3><p>Maintenant que tout fonctionne, nous allons créer une première version. Ici bien évidemment on utilise <code>git</code> (ça semble évident…).</p><h2 id="ajouter-un-gitlab-ci-yml" tabindex="-1">Ajouter un gitlab-ci.yml <a class="header-anchor" href="#ajouter-un-gitlab-ci-yml" aria-label="Permalink to &quot;Ajouter un gitlab-ci.yml&quot;">​</a></h2><p>Pour activer Gitlab-CI, c&#39;est aussi simple que d&#39;ajouter un fichier (<code>.gitlab-ci.yml</code>), dans le code source de votre projet. Je vous laisse ajouter la configuration suivante.</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Comprendre le fonctionnement</p><p>Vous voyez ici que finalement l&#39;important c&#39;est de comprendre le fonctionnement pour l&#39;adapteur à notre besoin. Dans le cadre du CI/CD, il faut souvent lire la documentation, adapter, réessayer, etc.</p><p>Mais une fois configuré… La vie sera belle et votre travail en grande partie automatisé.</p></div><h3 id="tester" tabindex="-1">Tester <a class="header-anchor" href="#tester" aria-label="Permalink to &quot;Tester&quot;">​</a></h3><p>Pour l&#39;instant pas de création d&#39;image Docker, nous allons-y aller étape par étape. La première ? Valider que l&#39;installation des dépendances fonctionne sans problème sur Gitlab-CI.</p><p>Je vous laisse donc commiter <strong>et pusher</strong> votre code source.</p><p>Si tout se passe bien vous devez avoir :</p><p><img src="`+t+`" alt="Build CI" loading="lazy"></p><h3 id="dockeriser" tabindex="-1">Dockeriser <a class="header-anchor" href="#dockeriser" aria-label="Permalink to &quot;Dockeriser&quot;">​</a></h3><p>La première étape est de <code>Dockeriser</code> votre application actuelle. L&#39;idée est donc de créer le fichier Dockerfile nécessaire au bon fonctionnement de votre site web. Je vous laisse réfléchir au besoin, mais pensez qu&#39;ici nous avons un site <strong>static</strong> qui ne possède aucune dépendance ; vous pouvez donc rester très très simple !</p><p><a href="https://vuejs.org/v2/cookbook/dockerize-vuejs-app.html" target="_blank" rel="noreferrer">Vous n&#39;avez pas d&#39;inspiration ? Pas de problème, la documentation officielle nous aide</a></p><details class="details custom-block"><summary>Vous avez besoin d&#39;aide ?</summary><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nginx:stable-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dist /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 80</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nginx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;daemon off;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><div class="danger custom-block"><p class="custom-block-title">STOP !</p><p>Avant de pusher votre code, tester sur votre ordinateur le bon fonctionnement !</p><p>Dans mon cas :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue:test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vuetest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue:test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><h3 id="packager" tabindex="-1">Packager <a class="header-anchor" href="#packager" aria-label="Permalink to &quot;Packager&quot;">​</a></h3><p>Nous avons maintenant tout le nécessaire pour packager notre application directement sur Gitlab-CI et la publier sur le Registry interne à GitLab. Nous allons devoir modifier notre fichier <code>.gitlab-ci.yml</code> pour y ajouter une autre step, celle de « release » / « packaging » / « encapsulation ».</p><p>La conception de ce gitlab-ci, est un peu plus complexe, je vous propose de vous le donner pour que nous le décortiquer ensemble :</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    expire_in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1 hour</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">release-img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:19.03.12</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:19.03.12-dind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IMAGE_TAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker build -t $IMAGE_TAG .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker push $IMAGE_TAG</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>Normalement si tout se passe bien vous devriez avoir …</p><p><img src="`+p+'" alt="Si tout se passe bien…" loading="lazy"></p><p><img src="'+r+'" alt="Si tout se passe bien…" loading="lazy"></p><h2 id="tester-depuis-votre-poste-l-image-obtenue" tabindex="-1">Tester depuis votre poste l&#39;image obtenue <a class="header-anchor" href="#tester-depuis-votre-poste-l-image-obtenue" aria-label="Permalink to &quot;Tester depuis votre poste l&#39;image obtenue&quot;">​</a></h2><h3 id="vous-connecter" tabindex="-1">Vous connecter <a class="header-anchor" href="#vous-connecter" aria-label="Permalink to &quot;Vous connecter&quot;">​</a></h3><p>Votre image est maintenant sauvegardée sur les serveurs de Gitlab, nous pouvons donc maintenant nous en servir sans la builder sur notre poste préalablement. Cependant ce « hub » n&#39;est pas public comme l&#39;officiel, il faudra donc se connecter préalablement / s&#39;authentifier auprès des serveurs de Gitlab.</p><div class="danger custom-block"><p class="custom-block-title">STOP</p><p>Votre mot de passe ne fonctionnera pas ! Pour des raisons de sécurité vous ne pourrez pas utiliser votre propre mot de passe pour vous authentifiez. <a href="https://gitlab.com/-/profile/personal_access_tokens" target="_blank" rel="noreferrer">Vous allez devoir générer un Token depuis votre profil</a></p><p><img src="'+h+'" alt="Si tout se passe bien…" loading="lazy"></p></div><p>Une fois le token généré il suffit de vous connecter au Registry via la commande :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.gitlab.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lancer-votre-image" tabindex="-1">Lancer votre image <a class="header-anchor" href="#lancer-votre-image" aria-label="Permalink to &quot;Lancer votre image&quot;">​</a></h3><p>Pour lancer votre image, rien de bien complexe ! Il suffit de spécifier le bon projet et le bon tag. Dans mon cas voilà à quoi ça ressemble :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.gitlab.com/vbrosseau/ci-packaging:master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+o+`" alt="Docker RUN" loading="lazy"></p><h2 id="apporter-des-modifications" tabindex="-1">Apporter des modifications <a class="header-anchor" href="#apporter-des-modifications" aria-label="Permalink to &quot;Apporter des modifications&quot;">​</a></h2><p>Votre stack est maintenant prête, elle est jouable / rejouable à l&#39;infinie. Je vous laisse apporter des modifications « importante » à votre site Internet pour tester que l&#39;image Docker s&#39;update correctement après vos commits.</p><h2 id="booster-les-performances" tabindex="-1">Booster les performances <a class="header-anchor" href="#booster-les-performances" aria-label="Permalink to &quot;Booster les performances&quot;">​</a></h2><p>Votre compilation doit-être actuellement plutôt lente… C&#39;est normal l&#39;installation des dépendances prend un peu de temps. Dans gitlab-ci nous pouvons ajouter du cache, j&#39;ai donné pas mal de pistes pour les autres étapes… Pour celle-ci je vous laisse chercher dans la documentation.</p><p><a href="https://docs.gitlab.com/ee/ci/caching/" target="_blank" rel="noreferrer">Gestion du cache</a></p><h3 id="image-multi-architectures" tabindex="-1">Image multi-architectures ? <a class="header-anchor" href="#image-multi-architectures" aria-label="Permalink to &quot;Image multi-architectures ?&quot;">​</a></h3><p>Vous souhaitez créer une image qui fonctionnera sur un Raspberry Pi, mais également sur une machine X86? C&#39;est possible, c&#39;est ce que l&#39;on appel le « Multi-architectures. Nous sommes plus dans quelques choses d&#39;aussi simple qu&#39;avec l&#39;exemple précédent, mais vous pouvez le faire sans problème depuis Gitlab-CI ?</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dockerise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:19.03.12</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:19.03.12-dind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--experimental&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IMAGE_TAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    DOCKER_DRIVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">overlay2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    DOCKER_TLS_CERTDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    BUILDX_VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v0.4.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  before_script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apk add curl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mkdir -p ~/.docker/cli-plugins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">curl -sSLo ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/$BUILDX_VERSION/buildx-$BUILDX_VERSION.linux-amd64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">chmod +x ~/.docker/cli-plugins/docker-buildx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker run --rm --privileged multiarch/qemu-user-static --reset -p yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker info</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker buildx create --use</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker buildx build --push --platform linux/arm/v8,linux/amd64 -t $IMAGE_TAG .</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,62),d=[k];function u(m,g,E,b,y,v){return i(),a("div",null,d)}const f=s(c,[["render",u]]);export{C as __pageData,f as default};
