import{_ as e,c as s,o as t,U as a}from"./chunks/framework.aGaNZw_P.js";const i="/assets/vitejs.DbkVvnOq.jpg",r="/assets/vite-init.BfwOhCGc.jpg",o="/assets/vite-structure.BtMw4Zdi.jpg",f=JSON.parse('{"title":"Les composants avec VueJS 3","description":"","frontmatter":{},"headers":[],"relativePath":"tp/composants/vuejs.md","filePath":"tp/composants/vuejs.md","lastUpdated":1670194180000}'),n={name:"tp/composants/vuejs.md"},l=a('<h1 id="les-composants-avec-vuejs-3" tabindex="-1">Les composants avec VueJS 3 <a class="header-anchor" href="#les-composants-avec-vuejs-3" aria-label="Permalink to &quot;Les composants avec VueJS 3&quot;">​</a></h1><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#introduction">Introduction</a></li><li><a href="#technologies-utilisees">Technologies utilisées</a></li><li><a href="#avant-propos">Avant-propos</a></li><li><a href="#creer-le-projet">Créer le projet</a></li><li><a href="#premier-lancement">Premier lancement</a></li><li><a href="#la-structure">La structure</a><ul><li><a href="#les-vue">Les .Vue</a></li></ul></li></ul></nav></details><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Dans ce TP nous allons mettre en pratique l&#39;écriture de composants en VueJS. De la logique à la réalisation, nous allons parcourir les bases de la réalisation de composants et de la réactivité.</p><p>Dans ce projet nous allons utiliser ViteJS qui permettra de créer rapidement un projet VueJS 3.</p><h2 id="technologies-utilisees" tabindex="-1">Technologies utilisées <a class="header-anchor" href="#technologies-utilisees" aria-label="Permalink to &quot;Technologies utilisées&quot;">​</a></h2><p>Nous allons avoir besoin de différentes technologies pour faire fonctionner le projet :</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">NodeJS</a></li><li><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">ViteJS</a></li><li><a href="https://vuejs.org/" target="_blank" rel="noreferrer">VueJS</a></li><li><a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind</a></li></ul><div class="tip custom-block"><p class="custom-block-title">Pourquoi Tailwind ?</p><p>J&#39;ai envie de dire… Pourquoi pas ? Tailwind est une vraie alternative à Bootstrap, l&#39;approche modulaire est intéressante et ce mini projet est un bon moyen de la découvrir.</p></div><h2 id="avant-propos" tabindex="-1">Avant-propos <a class="header-anchor" href="#avant-propos" aria-label="Permalink to &quot;Avant-propos&quot;">​</a></h2><p>Dans ce TP, je vais partir que votre environnement de travail est déjà fonctionnel. C&#39;est-à-dire que vous avez sur votre machine :</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">NodeJS</a> (en version LTS)</li></ul><div class="danger custom-block"><p class="custom-block-title">Un détail important</p><p>Comme pour les PHP avec Laravel, je vous déconseille vivement la création d&#39;un projet dans un lecteur réseau. La multitude de « petits fichiers » est une source de ralentissement non négligeable surtout quand vous êtes plusieurs sur le même lecteur réseau.</p></div><h2 id="creer-le-projet" tabindex="-1">Créer le projet <a class="header-anchor" href="#creer-le-projet" aria-label="Permalink to &quot;Créer le projet&quot;">​</a></h2><p>ViteJS ne nécessite rien d&#39;autre que d&#39;avoir sur votre ordinateur <code>NodeJS</code> (minimum 12) et <code>NPM</code>. Si c&#39;est le cas pour vous, il vous suffit de saisir dans votre terminal :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">C&#39;est interactif !</p><p>L&#39;ensemble du processus est interactif ; il vous suffit donc de suivre les étapes pour créer un projet.</p><p><strong>Attention quand même</strong>, le projet que vous allez créer sera situé dans le dossier courant.</p></div><p><img src="'+i+`" alt="ViteJS création d&#39;un projet" loading="lazy"></p><div class="warning custom-block"><p class="custom-block-title">plusieurs choix !</p><p>Vous avez le choix du type de projet ; nous allons choisir <strong>Vue</strong> puis <strong>Typescript</strong>. Cette sélection du type de projet est la vraie force de ViteJS, grâce à son système de plug-in ViteJS est complètement agnostique il est donc complètement possible de faire autre chose que du VueJS (et ça, c&#39;est cool).</p></div><h2 id="premier-lancement" tabindex="-1">Premier lancement <a class="header-anchor" href="#premier-lancement" aria-label="Permalink to &quot;Premier lancement&quot;">​</a></h2><p>La création du projet ne devrait prendre que quelques instants, une fois réalisé, je vous laisse suivre les instructions fournies par l&#39;outil créé par l&#39;équipe de Vite. À savoir dans mon cas :</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Si tout se passe bien, vous devriez être capable d&#39;afficher la page de démo d&#39;un projet Vite « Vide » :</p><p><img src="`+r+'" alt="Vite Init project" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">Qu&#39;avons-nous ici ?</p><p>Nous avons ici un projet « vide » fourni par Vite + Vue (le tout en TypeScript).</p><p>Quelques éléments importants :</p><ul><li>Le serveur Web est intégré (comme Laravel, ou Mini MVC Sample).</li><li>Le serveur « surveille » les fichiers sources et autorafraîchit la page en cas de modifications.</li><li>Vous avez dans l&#39;exemple un composant interactif de démo.</li></ul></div><p><strong>Avant d&#39;aller plus loin</strong>, je vous laisse tester :</p><ul><li>Le site que vous venez de lancer.</li><li>La modification du code source, je vous propose de changer <strong>Vite + Vue</strong> par <strong>Vite + Vue + Votre Prénom</strong> (je vous laisse fouinner, mais la modification est à faire dans le <code>App.vue</code>)</li></ul><p>Votre modification de code doit être immédiatement disponible.</p><h2 id="la-structure" tabindex="-1">La structure <a class="header-anchor" href="#la-structure" aria-label="Permalink to &quot;La structure&quot;">​</a></h2><p>Un projet Vite à toujours la même structure de base :</p><p><img src="'+o+'" alt="Structure" loading="lazy"></p><p>Les éléments <strong>importants</strong> sont les suivants :</p><ul><li>Votre code source sera dans le dossier <code>src/</code>.</li><li>Les composants seront dans <code>src/components/</code>.</li><li>Vos dépendances / librairies seront dans <code>package.json</code>.</li><li>Les scripts (hors <code>.vue</code>) seront nommé <code>….ts</code> (pour indiquer TypeScript).</li></ul><p><strong>Avant d&#39;allez plus loin, je vous laisse regarder le contenu</strong>.</p><div class="danger custom-block"><p class="custom-block-title">Envie de tout changer ?</p><p>Bien évidemment vous pouvez la modifier… Mais je vous encourage vivement à la garder telle quelle !</p></div><h3 id="les-vue" tabindex="-1">Les .Vue <a class="header-anchor" href="#les-vue" aria-label="Permalink to &quot;Les .Vue&quot;">​</a></h3><p>Sans entrer trop dans le détail (ce n&#39;est pas le but de ce TP), un fichier <code>.vue</code> va contenir l&#39;ensemble de la logique « d&#39;un composant » il pourra donc contenir :</p><ul><li><em>La vue (Le HTML) :</em> Il s&#39;agit de template, nous avons donc à notre disposition une synthaxe particulière <a href="https://vuejs.org/guide/essentials/template-syntax.html" target="_blank" rel="noreferrer">À voir ici</a>.</li><li><em>Le script (Le TypeScript / JavaScript) :</em> Il s&#39;agit de l&#39;ensemble de la logique de fonctionnement de votre composant. (appel Ajax, logique de clique, etc). Avec VueJS 3.0 nous avons accès à la <a href="https://vuejs.org/api/sfc-script-setup.html" target="_blank" rel="noreferrer">composition API, c&#39;est pratique n&#39;hésitez pas à vous documenter ici</a></li><li><em>Le Style (CSS) :</em> Style de votre composant, de la css classique, mais appliquée uniquement sur votre composant <a href="https://vue-loader.vuejs.org/guide/scoped-css.html" target="_blank" rel="noreferrer">En savoir plus</a></li></ul>',38),c=[l];function u(p,d,m,h,v,g){return t(),s("div",null,c)}const k=e(n,[["render",u]]);export{f as __pageData,k as default};
