import{_ as s,c as e,o as a,U as i}from"./chunks/framework.aGaNZw_P.js";const n="/assets/gitlab-docker-ci.ChbQhWoz.jpg",l="/assets/project_create.CYg3sjbV.png",t="/assets/ci-step.Cwi5Ms22.png",r="/assets/ci-step-failure.CS9G6fvF.png",p="/assets/registry.BekHGpu1.png",o="/assets/token.DhyotGpm.png",c="/assets/docker_run.DLbsjmrL.png",F=JSON.parse(`{"title":"Intégration continue avec Laravel","description":"Dans ce TP nous allons voir comment mettre en place de l'intégration continue avec Laravel. Dans un précédent TP nous avons vu en détail comment « lancer / héberger » votre site avec Docker + Compose, nous avons ici la suite à savoir comment packager votre code dans un conteneur réutilisable sans envoyer votre code source sur le serveur.","frontmatter":{"description":"Dans ce TP nous allons voir comment mettre en place de l'intégration continue avec Laravel. Dans un précédent TP nous avons vu en détail comment « lancer / héberger » votre site avec Docker + Compose, nous avons ici la suite à savoir comment packager votre code dans un conteneur réutilisable sans envoyer votre code source sur le serveur."},"headers":[],"relativePath":"tp/ops/deployer-laravel-ci.md","filePath":"tp/ops/deployer-laravel-ci.md","lastUpdated":1642960109000}`),u={name:"tp/ops/deployer-laravel-ci.md"},d=i('<h1 id="integration-continue-avec-laravel" tabindex="-1">Intégration continue avec Laravel <a class="header-anchor" href="#integration-continue-avec-laravel" aria-label="Permalink to &quot;Intégration continue avec Laravel&quot;">​</a></h1><p>Dans ce TP nous allons voir comment mettre en place de l&#39;intégration continue avec Laravel. Dans le <a href="./deployer-laravel-docker.html">précédent TP</a> nous avons vu en détail comment « lancer / héberger » votre site avec Docker + Compose, nous avons ici la suite à savoir comment packager votre code dans un conteneur réutilisable sans envoyer votre code source sur le serveur.</p><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#avant-propos">Avant-propos</a></li><li><a href="#les-objectifs-d-une-ci">Les objectifs d&#39;une CI</a></li><li><a href="#creer-un-projet-laravel">Créer un projet Laravel</a></li><li><a href="#ajout-de-docker">Ajout de Docker</a></li><li><a href="#gitlab-ci">Gitlab-CI</a><ul><li><a href="#creation-du-projet-sur-gitlab">Création du projet sur GitLab</a></li><li><a href="#envoyer-votre-code-source">Envoyer votre code source</a></li></ul></li><li><a href="#activer-gitlab-ci">Activer Gitlab-CI</a></li><li><a href="#un-long-fleuve-tranquille">Un long fleuve tranquille ?</a></li><li><a href="#deployer-sur-votre-serveur">Déployer sur votre serveur !</a><ul><li><a href="#vous-connecter">Vous connecter</a></li><li><a href="#lancer-votre-image">Lancer votre image</a></li></ul></li></ul></nav></details><h2 id="avant-propos" tabindex="-1">Avant-propos <a class="header-anchor" href="#avant-propos" aria-label="Permalink to &quot;Avant-propos&quot;">​</a></h2><p>Nous allons dans ce TP mettre en place les briques réutilisables qui vous permettront de packager vos applications avec Docker et un hub privé (Gitlab-CI). La procédure est relativement guidée, vous devez donc vous poser les bonnes questions pour contrôler si vous êtes capables de le refaire dans votre propre projet.</p><p><img src="'+n+`" alt="Gitlab CI" loading="lazy"></p><p>Notre objectif ici est donc :</p><ul><li>Paramétrer une CI (Gitlab-CI)</li><li>Créer l&#39;image (en continu) de votre projet.</li><li>Le partager sur le Hub <strong>privé</strong> de Gitlab.</li><li>Regarder comment le déployer sur votre serveur.</li></ul><h2 id="les-objectifs-d-une-ci" tabindex="-1">Les objectifs d&#39;une CI <a class="header-anchor" href="#les-objectifs-d-une-ci" aria-label="Permalink to &quot;Les objectifs d&#39;une CI&quot;">​</a></h2><p>L&#39;objectif de faire construire une image Docker directement depuis la CI est d&#39;automatiser à 100% le processus de packaging de votre application. Plus d&#39;humain == plus de risque.</p><div class="tip custom-block"><p class="custom-block-title">Plus de risque ?</p><p>Façon de parler évidemment… En sécurité l&#39;humain est source de vulnérabilité « volontaire » et « involontaire ». En automatisant au maximum les opérations de packaging, nous pourrons par la même réduire les risques :</p><ul><li>D&#39;erreurs.</li><li>De corruption du livrable.</li><li>de perte de temps.</li></ul></div><p>La finalité est donc de créer directement depuis le CI le livrable <strong>ici l&#39;image Docker de notre application</strong>. Nous utiliserons Gitlab-ci, mais la même opération est possible maintenant avec <a href="https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages" target="_blank" rel="noreferrer">Github</a>.</p><p>Avec Gitlab ce service s&#39;appelle le <a href="https://docs.gitlab.com/ee/user/packages/container_registry/index.html" target="_blank" rel="noreferrer">Gitlab Container Registry</a>, le service est gratuit et est <strong>intégré</strong> à Gitlab (quelle que soit la version que vous avez). <strong>Bonus</strong> vous avez un registry intégré à chaque projet 👍.</p><h2 id="creer-un-projet-laravel" tabindex="-1">Créer un projet Laravel <a class="header-anchor" href="#creer-un-projet-laravel" aria-label="Permalink to &quot;Créer un projet Laravel&quot;">​</a></h2><p>Pour illustrer, nous allons créer un nouveau projet Laravel, vous pouvez bien évidemment utiliser le votre, mais pour faire simple je vais créer un projet tout neuf.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laravel/laravel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo-ci</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Le projet est complètement standard… Rien de spécial.</p><div class="danger custom-block"><p class="custom-block-title">Un instant!</p><ul><li>À votre avis, est-ce que Docker et Gitlab-CI se limitent à Laravel ?</li></ul></div><h2 id="ajout-de-docker" tabindex="-1">Ajout de Docker <a class="header-anchor" href="#ajout-de-docker" aria-label="Permalink to &quot;Ajout de Docker&quot;">​</a></h2><p>Comme dans le <a href="./deployer-laravel-docker.html">TP précédent</a> nous allons ajouter le support de Docker pour pouvoir le packager. Ajouter le support de Docker c&#39;est très simple il suffit d&#39;ajouter « un fichier ». Le fichier, vous vous en souvenez c&#39;est le <code>Dockerfile</code>, vous vous souvenez aussi que ce fichier dans le cas de Laravel est « relativement générique » c&#39;est à dire toujours le même.</p><p>Je vous laisse ajouter le fichier <code>Dockerfile</code> à la racine de votre site (à côté du <code>.env</code> donc) :</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webdevops/php-nginx:8.0-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Installation dans votre Image du minimum pour que Docker fonctionne</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apk add oniguruma-dev libxml2-dev</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docker-php-ext-install \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bcmath \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctype \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fileinfo \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mbstring \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pdo_mysql \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tokenizer \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Installation dans votre image de Composer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=composer:latest /usr/bin/composer /usr/bin/composer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WEB_DOCUMENT_ROOT /app/public</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APP_ENV production</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cp -n .env.example .env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Installation et configuration de votre site pour la production</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://laravel.com/docs/8.x/deployment#optimizing-configuration-loading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> composer install --no-interaction --optimize-autoloader --no-dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate security key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> php artisan key:generate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Optimizing Configuration loading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> php artisan config:cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Optimizing Route loading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> php artisan route:cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Optimizing View loading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> php artisan view:cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chown -R application:application .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Un Instant</p><ul><li>Avez-vous vérifié le contenu du Dockerfile ?</li><li>Pourquoi est-ce important ?</li></ul></div><h2 id="gitlab-ci" tabindex="-1">Gitlab-CI <a class="header-anchor" href="#gitlab-ci" aria-label="Permalink to &quot;Gitlab-CI&quot;">​</a></h2><p>Vous connaissez déjà Gitlab, mais avez-vous vu l&#39;option Gitlab-CI ? Gitlab-CI est la plateforme « gratuite » d&#39;intégration continue proposée par Gitlab. L&#39;intégration continue pour rappel :</p><blockquote><p>L&#39;intégration continue est une méthode de développement de logiciel DevOps avec laquelle les développeurs intègrent régulièrement leurs modifications de code à un référentiel centralisé, suite à lequel des opérations de création et de test sont automatiquement menées.</p></blockquote><p>Gitlab-CI est donc une plateforme prête à l&#39;emploi permettant de packager, tester, valider votre code sources. Elle possède une version gratuite permettant de valider votre solution, en entreprise vous avez la possibilité <a href="/tp/ci/gitlab/runner.html">d&#39;installer un Runner</a> qui lèvera toute limitation.</p><h3 id="creation-du-projet-sur-gitlab" tabindex="-1">Création du projet sur GitLab <a class="header-anchor" href="#creation-du-projet-sur-gitlab" aria-label="Permalink to &quot;Création du projet sur GitLab&quot;">​</a></h3><p>Avec votre compte GitLab vous pouvez créer un nombre illimité de projets. La première étape est donc de créer un projet sur votre <a href="https://gitlab.com/projects/new" target="_blank" rel="noreferrer">compte Gitlab</a>.</p><p><img src="`+l+`" alt="Project creation" loading="lazy"></p><p>⚠️ Je vous conseille de mettre votre projet en mode « Private ».</p><div class="tip custom-block"><p class="custom-block-title">Un instant !</p><p>Arrêtons-nous un instant…</p><ul><li>Pourquoi créer le projet en mode privée ?</li><li>Avez-vous regardé les limites du monde gratuit de Gitlab-CI ? (<a href="https://about.gitlab.com/pricing/" target="_blank" rel="noreferrer">En savoir plus</a>)</li></ul></div><h3 id="envoyer-votre-code-source" tabindex="-1">Envoyer votre code source <a class="header-anchor" href="#envoyer-votre-code-source" aria-label="Permalink to &quot;Envoyer votre code source&quot;">​</a></h3><p>Ça semble évident… Vue que nous allons faire travailler Gitlab, nous devons envoyer notre code source ! Vous savez déjà le faire, c&#39;est comme avec Github, à savoir :</p><ul><li>Ajout de le remote (suivez la procédure sur gitlab)</li><li>Création d&#39;un commit en local (<code>git commit …</code>)</li><li>Envoi du commit (<code>git push</code>)</li></ul><div class="tip custom-block"><p class="custom-block-title">Un instant !</p><ul><li>Pourquoi envoyer le coude source sur Gitlab ?</li><li>Combien de commit avez-vous faits ?</li></ul></div><h2 id="activer-gitlab-ci" tabindex="-1">Activer Gitlab-CI <a class="header-anchor" href="#activer-gitlab-ci" aria-label="Permalink to &quot;Activer Gitlab-CI&quot;">​</a></h2><p>Gitlab-CI est déjà actif sur votre projet ! Il n&#39;attend que la configuration. Nous avons vu en cours que cette étape était un simple fichier <code>yaml</code> à ajouter dans votre projet, l&#39;idée ici n&#39;est pas de vous faire écrire le fichier (car ça prendra beaucoup de temps pour des novices). L&#39;idée est de vous faire utiliser une configuration que l&#39;on peut trouver dans la documentation de Gitlab-CI.</p><p>La documentation est réellement bien faite, vous pouvez aller la voir pour comprendre en détail les étapes: <a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html" target="_blank" rel="noreferrer">C&#39;est par ici</a></p><p>Nous avons maintenant tout le nécessaire pour packager notre application directement sur Gitlab-CI et la publier sur le Registry interne à GitLab. Nous allons devoir modifier notre fichier <code>.gitlab-ci.yml</code> pour y ajouter les steps</p><ul><li>Tester le code (simplement avec du <code>lint</code>)</li><li>Celle de « release » / « packaging » / « encapsulation ».</li></ul><p>La conception de ce Gitlab-ci, est un peu plus complexe, je vous propose de vous le donner pour que nous le décortiquer ensemble :</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">composer</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cp .env.example .env</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">composer install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">php artisan key:generate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">php vendor/bin/phpunit --colors</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:20.10.12</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker:20.10.12-dind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    IMAGE_TAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker build -t $IMAGE_TAG .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker push $IMAGE_TAG</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>Je vous laisse créer un fichier <code>.gitla-ci.yaml</code> (dans le même dossier que le <code>Dockerfile</code>) avec le contenu précédent.</p><div class="tip custom-block"><p class="custom-block-title">Un Instant !</p><ul><li>Combien d&#39;étapes possèdent notre « Intégration Continue » ?</li><li>Dans quel ordre les étapes seront exécutées ?</li><li>Pourquoi avons-nous une étape de test ? Pourquoi est-ce important ?</li><li>Avez-vous écrit les tests ? Si non d&#39;où proviennent-ils ?</li></ul></div><p>Maintenant que le fichier est présent, je vous laisse :</p><ul><li>Créer un nouveau commit.</li><li>L&#39;envoyer sur le Gitlab avec un Push.</li></ul><p>Normalement, votre processus d&#39;intégration continue doit avoir démarré automatiquement et doit ressembler à ceci :</p><p><img src="`+t+'" alt="Étape de CI" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">Un Instant !</p><ul><li>Que fait la première étape ?</li><li>Pouvons nous voir ce que fait le serveur ?</li><li>Est-ce que l&#39;étape <code>build</code> et <code>test</code> sont réalisés en même temps ?</li><li>Comment identifier que votre étape s&#39;est bien passée ?</li></ul></div><div class="danger custom-block"><p class="custom-block-title">C&#39;est long !</p><p>L&#39;intégration continue peut parfois prendre un peu de temps… C&#39;est le bon moment de réaliser un peu de veilles :</p><ul><li><a href="https://cours.brosseau.ovh/tp/ci/gitlab/runner.html" target="_blank" rel="noreferrer">Installer un Runner</a></li><li><a href="https://news.ycombinator.com/" target="_blank" rel="noreferrer">HackerNews</a></li></ul><p>Bref, profitez du temps pour vous autoformer.</p></div><h2 id="un-long-fleuve-tranquille" tabindex="-1">Un long fleuve tranquille ? <a class="header-anchor" href="#un-long-fleuve-tranquille" aria-label="Permalink to &quot;Un long fleuve tranquille ?&quot;">​</a></h2><p>Nous voyons ici le côté simple et clé en main de l&#39;intégration continue… Au début c&#39;est un peu plus complexe ! Voyez par vous-même avec l&#39;écriture de ce TP :</p><p><img src="'+r+'" alt="Étape de CI avec échec" loading="lazy"></p><p>Donc c&#39;est normal… Ne vous inquiétez pas !</p><h2 id="deployer-sur-votre-serveur" tabindex="-1">Déployer sur votre serveur ! <a class="header-anchor" href="#deployer-sur-votre-serveur" aria-label="Permalink to &quot;Déployer sur votre serveur !&quot;">​</a></h2><p>Si tout c&#39;est bien passé, vous avez maintenant sur votre serveur une image prête à être utilisée :</p><p><img src="'+p+'" alt="Registry" loading="lazy"></p><h3 id="vous-connecter" tabindex="-1">Vous connecter <a class="header-anchor" href="#vous-connecter" aria-label="Permalink to &quot;Vous connecter&quot;">​</a></h3><p>Votre image est maintenant sauvegardée sur les serveurs de Gitlab, nous pouvons donc maintenant nous en servir sans la builder sur notre poste préalablement. Cependant ce « hub » n&#39;est pas public comme l&#39;officiel, il faudra donc se connecter préalablement / s&#39;authentifier auprès des serveurs de Gitlab.</p><div class="danger custom-block"><p class="custom-block-title">STOP</p><p>Votre mot de passe ne fonctionnera pas ! Pour des raisons de sécurité, vous ne pourrez pas utiliser votre propre mot de passe pour vous authentifié. <a href="https://gitlab.com/-/profile/personal_access_tokens" target="_blank" rel="noreferrer">Vous allez devoir générer un Token depuis votre profil.</a></p><p><img src="'+o+`" alt="Si tout se passe bien…" loading="lazy"></p></div><p>Une fois le token généré, il suffit de vous connecter au Registry via la commande :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.gitlab.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lancer-votre-image" tabindex="-1">Lancer votre image <a class="header-anchor" href="#lancer-votre-image" aria-label="Permalink to &quot;Lancer votre image&quot;">​</a></h3><p>Pour lancer votre image, rien de bien complexe ! Il suffit de spécifier le bon projet et le bon tag. Dans mon cas voilà à quoi ça ressemble :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.gitlab.com/vbrosseau/ci-packaging:master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8080:80&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.gitlab.com/vbrosseau/ci-packaging:master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+c+'" alt="Docker RUN" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">Un Instant !</p><ul><li>À quoi correspond le <code>docker pull</code>?</li><li>Où ai-je trouvé l&#39;information après le run ?</li><li>Nous avions utilisé la dernière fois un fichier, <code>docker-compose.yml</code> est-ce encore possible ?</li></ul></div>',68),h=[d];function k(m,b,v,g,E,y){return a(),e("div",null,h)}const C=s(u,[["render",k]]);export{F as __pageData,C as default};
