import{_ as e,c as i,o as t,U as a}from"./chunks/framework.aGaNZw_P.js";const l="/assets/collecteur_principe.C0_It-PA.png",h=JSON.parse(`{"title":"Application Client / Serveur","description":"L'objectif de cette application va être la mise en pratique de la communication Client et Serveur d'une application, mais également les à côté de celle-ci (Serveur, Base de données, etc.).","frontmatter":{"description":"L'objectif de cette application va être la mise en pratique de la communication Client et Serveur d'une application, mais également les à côté de celle-ci (Serveur, Base de données, etc.)."},"headers":[],"relativePath":"tp/android/app-avance-android.md","filePath":"tp/android/app-avance-android.md","lastUpdated":1640899309000}`),n={name:"tp/android/app-avance-android.md"},o=a('<h1 id="application-client-serveur" tabindex="-1">Application Client / Serveur <a class="header-anchor" href="#application-client-serveur" aria-label="Permalink to &quot;Application Client / Serveur&quot;">​</a></h1><p>L&#39;objectif de cette application va être la mise en pratique de la communication Client et Serveur d&#39;une application, mais également les à côté de celle-ci (Serveur, Base de données, etc.). Cette application couvrira l&#39;ensemble des compétences vu ensemble :</p><ul><li>La conception (<strong>et l&#39;organisation</strong> d&#39;une application, package, MVVM, Fragment si nécessaire)</li><li>La communication via le réseau</li><li>La modélisation d&#39;un projet « mobile ». <ul><li>Base de données</li><li>« Authentification d&#39;un client » (au minimum reconnaissance de celui-ci)</li></ul></li><li>La qualité de code (indentation, organisation).</li><li>La mise en place de commentaires (pour faciliter la compréhension).</li><li>L&#39;aspect « propre » des différents écrans de votre application.</li></ul><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#introduction">Introduction</a><ul><li><a href="#l-application">L&#39;application</a></li><li><a href="#les-clients-qui-collectent-de-l-information">Les clients qui collectent de l&#39;information</a></li><li><a href="#le-serveur">Le serveur</a></li></ul></li></ul></nav></details><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Une application Android est rarement toute seule, c&#39;est cet aspect que je vous propose de travailler dans ce projet. Nous allons créer ensemble (enfin vous) une application qui sera constituée de deux types de clients :</p><ul><li>Les clients qui affichent des informations.</li><li>Les clients qui collectent de l&#39;information.</li></ul><p>En parallèle des clients, vous allez devoir construire un « serveur », ce serveur aura pour but :</p><ul><li>Identifier les clients (via un ID, ou un UUID, ou un TOKEN). <ul><li>La création du client sera faite via une vue de l&#39;application. Celui-ci devra fournir « Son ID / UUID / TOKEN » et également un nom.</li><li>Les clients seront identifiés lors des appels réseau par l&#39;UI / UUID ou Token on fonction du choix.</li></ul></li><li>Stocker les informations collectées par « les clients » (avec historiques). <strong>L&#39;information doit être horodatée</strong>.</li></ul><table><thead><tr><th style="text-align:center;"><img src="'+l+'" alt="Principe de fonctionnement" loading="lazy"></th></tr></thead><tbody><tr><td style="text-align:center;">Principe de fonctionnement</td></tr></tbody></table><h3 id="l-application" tabindex="-1">L&#39;application <a class="header-anchor" href="#l-application" aria-label="Permalink to &quot;L&#39;application&quot;">​</a></h3><p>L&#39;application de collecte et d&#39;affichage est unique. Celle-ci est découpée en deux parties :</p><ul><li>La collecte.</li><li>L&#39;affichage des données d&#39;un client précis (via saisie / flashage de son UUID).</li></ul><div class="tip custom-block"><p class="custom-block-title">La collecte ≠ Affichage</p><p>La partie collecte est optionnelle, <strong>les clients n&#39;ont donc pas l&#39;obligation d&#39;être connus du serveur</strong>.</p></div><h3 id="les-clients-qui-collectent-de-l-information" tabindex="-1">Les clients qui collectent de l&#39;information <a class="header-anchor" href="#les-clients-qui-collectent-de-l-information" aria-label="Permalink to &quot;Les clients qui collectent de l&#39;information&quot;">​</a></h3><p>Les clients qui collectent de l&#39;information sont des clients comme les autres. Cette collecte repose sur le principe d&#39;authentification par le serveur (via UUID, ID ou Token au choix). Cette collecte nécessitera donc une reconnaissance « un échange » préalable entre le client et le serveur.</p><div class="tip custom-block"><p class="custom-block-title">Un échange persistant</p><p>L&#39;échange entre le client est à faire qu&#39;une seule fois. Vous devez sauvegarder dans l&#39;application que celle-ci est maintenant « appairée » avec le serveur, suivant l&#39;UUID / TOKEN / ID choisit ; cet appairage <strong>doit-être</strong> sauvegardé dans les paramètres de l&#39;application et doit-être restauré à chaque démarrage de celle-ci.</p></div><div class="danger custom-block"><p class="custom-block-title">Pas de collecte en arrière-plan</p><p>Votre application doit collecter de l&#39;information uniquement si le smartphone est actif <strong>et affiche actuellement l&#39;application</strong>. Vous pouvez, si vous le désirez, empêcher <a href="https://developer.android.com/training/scheduling/wakelock" target="_blank" rel="noreferrer">la veille du smartphone sur la vue de collecte</a></p></div><h4 id="informations-collectees" tabindex="-1">Informations collectées <a class="header-anchor" href="#informations-collectees" aria-label="Permalink to &quot;Informations collectées&quot;">​</a></h4><p>La collecte devra être faite à interval régulier (~60secondes), celle-ci a pour but de collecter un maximum d&#39;informations depuis les capteurs du smartphone :</p><ul><li>La luminosité ambiante.</li><li>Le niveau de batterie.</li><li>La pression.</li><li>La température.</li><li>La position GPS / Réseau du téléphone (Lat, Long).</li></ul><p>Vous pouvez utiliser <a href="https://developer.android.com/guide/topics/sensors/sensors_environment" target="_blank" rel="noreferrer">la documentation officielle pour vous aider dans cette tâche</a>.</p><div class="tip custom-block"><p class="custom-block-title">Pas de limite</p><p>Vous avez d&#39;autres idées pour la collecte ? Pas de problème, je vous laisse ajouter ce que vous souhaitez.</p><p><strong>Vous avez les playservices ?</strong> si oui, vous pouvez même savoir si la personne marche / cours / roule en voiture.</p></div><p>Cette vue de collecte, n&#39;affichera rien de particulier à l&#39;utilisateur autre qu&#39;un écran avec « une animation de collecte » et un bouton lui permettant d&#39;arrêter celle-ci. Cette collecte sera envoyée au travers d&#39;une API au serveur.</p><h4 id="affichage-client" tabindex="-1">Affichage client <a class="header-anchor" href="#affichage-client" aria-label="Permalink to &quot;Affichage client&quot;">​</a></h4><p>L&#39;affichage des informations sera réalisé dans un autre écran de l&#39;application. Celui-ci devra afficher :</p><ul><li>Les données d&#39;un client choisi (via saisie ou flash QRCode du code)</li><li>L&#39;affichage des données du client devra indiquer l&#39;horodatage de la dernière collecte.</li><li>Un bouton d&#39;actualisation.</li><li>Possibilités d&#39;affichage (implémentation au choix) : <ul><li>Via une Recyclerview simple (mais avec des noms des capteurs dans la langue du client).</li><li>Via un Layout dédié avec des icônes en fonction du type de capteurs (une carte OpenStreetMap peut-être utilisée pour la position GPS).</li></ul></li><li><strong>Bonus</strong> la vue peut-être découpée en deux tabs afin d&#39;avoir une vue listant l&#39;ensemble des collecteurs de données connues par le serveur. Chaque ligne contiendra une action permettant d&#39;afficher un « client précis » (donc sans connaitre son code préalablement).</li><li><strong>Bonus</strong> affichage des données historiques d&#39;un client.</li></ul><h3 id="le-serveur" tabindex="-1">Le serveur <a class="header-anchor" href="#le-serveur" aria-label="Permalink to &quot;Le serveur&quot;">​</a></h3><p>Le serveur est à implémenter dans le langage de votre choix. Celui-ci doit être capable de :</p><ul><li>Stocker l&#39;information dans une base de données.</li><li>Créer un client.</li><li>Récupérer les dernières données d&#39;un client via son UUID / ID / TOKEN.</li><li><strong>Bonus</strong> liste de l&#39;ensemble des clients présents en base de données.</li><li><strong>Bonus</strong> obtention des données historiques d&#39;un client via son UUID / ID / TOKEN.</li></ul><div class="tip custom-block"><p class="custom-block-title">Langage au choix</p><p>Je vous laisse le choix du langage pour le développement du serveur.</p></div>',31),s=[o];function r(c,u,d,p,m,v){return t(),i("div",null,s)}const g=e(n,[["render",r]]);export{h as __pageData,g as default};
