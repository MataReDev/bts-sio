import{_ as s,c as e,o as i,U as a}from"./chunks/framework.aGaNZw_P.js";const l="/assets/abstract_uml.COkjz-5k.png",b=JSON.parse('{"title":"Classe abstraite : Mise en pratique","description":"Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des classes abstraites.","frontmatter":{"description":"Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des classes abstraites."},"headers":[],"relativePath":"cours/exercices/poo/les-classes-abstraites.md","filePath":"cours/exercices/poo/les-classes-abstraites.md","lastUpdated":1704112852000}'),t={name:"cours/exercices/poo/les-classes-abstraites.md"},n=a('<h1 id="classe-abstraite-mise-en-pratique" tabindex="-1">Classe abstraite : Mise en pratique <a class="header-anchor" href="#classe-abstraite-mise-en-pratique" aria-label="Permalink to &quot;Classe abstraite : Mise en pratique&quot;">​</a></h1><p>Dans cette mise en pratique, nous allons voir comment déclarer et utiliser des <code>Classes Abstraites en PHP</code>. Les classes abstraites sont un élément important de la programmation-objet, pour rappel :</p><ul><li>Sers de base à d&#39;autres classes dérivées (héritées).</li><li>Ne peut pas être instanciée (pas de new).</li><li>Permets de factoriser du code.</li><li>Les classes abstraites ne sont pas instanciable</li><li>Dois être héritée depuis une classe fille.</li></ul><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#ressources-disponibles">Ressources disponibles :</a></li><li><a href="#mise-en-situation">Mise en situation</a></li><li><a href="#declarer-les-classes">Déclarer les classes</a></li><li><a href="#utilisation">Utilisation</a></li><li><a href="#redefinir-une-methode">Redéfinir une méthode</a></li><li><a href="#evolution-du-code">Évolution du code</a></li><li><a href="#analyser-une-erreur">Analyser une erreur</a></li></ul></nav></details><h2 id="ressources-disponibles" tabindex="-1">Ressources disponibles : <a class="header-anchor" href="#ressources-disponibles" aria-label="Permalink to &quot;Ressources disponibles :&quot;">​</a></h2><ul><li><a href="/cheatsheets/poo/">Aide mémoire POO</a></li><li><a href="/cheatsheets/poo-uml/">Aide mémoire POO-UML</a></li><li><a href="/cours/poo.html">Cours POO</a></li></ul><h2 id="mise-en-situation" tabindex="-1">Mise en situation <a class="header-anchor" href="#mise-en-situation" aria-label="Permalink to &quot;Mise en situation&quot;">​</a></h2><p><img src="'+l+`" alt="UML" loading="lazy"></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtudiantAbstrait</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Force les classes filles à définir cette méthode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSpecificite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setSpecificite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($valeur);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // méthode commune</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Je suis &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSpecificite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Une classe<code>abstraite</code> est définie avec le mot clé :</li><li>Identifier les particularités de la classe <code>EtudiantAbstrait</code><ul><li><strong>Particularité 1 :</strong></li><li><strong>Particularité 2 :</strong></li><li><strong>Particularité 3 :</strong></li></ul></li><li>D&#39;un point de vue sécurité, qu&#39;apporte cette organisation ? (Une piste, encapsulation…)</li><li>Selon vous, pourquoi la classe abstraite ne possède-t-elle pas de constructeur ?</li></ul></div><h2 id="declarer-les-classes" tabindex="-1">Déclarer les classes <a class="header-anchor" href="#declarer-les-classes" aria-label="Permalink to &quot;Déclarer les classes&quot;">​</a></h2><p>Pour utiliser une classe abstraite, nous allons devoir « <strong>hériter</strong> » de celle-ci avec les mots clés que vous connaissez déjà :</p><ul><li><code>extends</code> en php et en java.</li><li><code>:</code> en C#.</li></ul><p>La différence avec un simple héritage, c&#39;est que vous devrez « implémenter » / « écrire » les deux méthodes :</p><ul><li><code>getSpecificite()</code></li><li><code>setSpecificite($valeur)</code></li></ul><p>Et la méthode parler ?</p><p>Pour la méthode <code>parler()</code> c&#39;est au choix. Vous pouvez :</p><ul><li>La redéfinir dans votre classe pour en changer le comportement.</li><li>Ne pas la redéfinir et bénéficier du comportement de « base de la classe abstraite ».</li></ul><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Écrire la définition de la classe pour <code>EtudiantSIO</code>.</li><li>Écrire la définition de la classe pour <code>EtudiantSEN</code>.</li><li>Quelle différence majeure observez-vous entre la classe abstraite <code>EtudiantAbstrait</code> et les classes filles ?</li></ul></div><h2 id="utilisation" tabindex="-1">Utilisation <a class="header-anchor" href="#utilisation" aria-label="Permalink to &quot;Utilisation&quot;">​</a></h2><p>Je souhaite créer <strong>6 étudiants</strong> (3 SEN et 3 SIO).</p><p>Pour les SEN ils doivent avoir les compétences suivantes</p><ul><li>La sécurité.</li><li>La soudure.</li><li>Le réseau.</li></ul><p>Pour le SIO ils doivent avoir les options suivantes :</p><ul><li>SLAM</li><li>SISR</li><li>SLAM</li></ul><p>Vous placerez ces étudiants dans <strong>une liste</strong>. Puis pour chacun d&#39;entre eux, vous appellerez la méthode <code>parler()</code>.</p><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Identifier l&#39;avantage d&#39;une classe abstraite VS un simple héritage.</li><li>Faire évoluer le code pour ajouter le <code>nom</code> et le <code>prenom</code> de l&#39;étudiant. <ul><li>Quelle(s) classe(s) seront impactées ?</li><li>Et de quelle manière ?</li></ul></li></ul></div><h2 id="redefinir-une-methode" tabindex="-1">Redéfinir une méthode <a class="header-anchor" href="#redefinir-une-methode" aria-label="Permalink to &quot;Redéfinir une méthode&quot;">​</a></h2><p>Après réflexion, vous souhaitez changer le comportement de la méthode <code>parler()</code> pour les étudiants de la classe <code>EtudiantSIO</code>.</p><p>Vous souhaitez que le message soit le suivant :</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Je</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> suis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> un</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> étudiant</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> et</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> je</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> suis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spécialisé</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> en</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sécurité</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Identifier les modifications à apporter au code.</li><li>Écrire le code pour la classe <code>EtudiantSIO</code>.</li></ul></div><h2 id="evolution-du-code" tabindex="-1">Évolution du code <a class="header-anchor" href="#evolution-du-code" aria-label="Permalink to &quot;Évolution du code&quot;">​</a></h2><p>Vous souhaitez ajouter l&#39;identifiant de l&#39;étudiant :</p><ul><li>nom</li><li>prénom</li></ul><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Quelles classe(s) seront impactée(s) ?</li><li>Quelles modifications apporter au code ?</li><li>Écrire le code permettant d&#39;ajouter ces informations.</li><li>Devez-vous modifier la méthode <code>parler()</code> ?</li></ul></div><h2 id="analyser-une-erreur" tabindex="-1">Analyser une erreur <a class="header-anchor" href="#analyser-une-erreur" aria-label="Permalink to &quot;Analyser une erreur&quot;">​</a></h2><p>Un développeur souhaite créer un Étudiant, il a donc écrit le code suivant :</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$etudiant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EtudiantAbstrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>En exécutant ce code, vous obtenez l&#39;erreur suivante :</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cannot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instantiate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtudiantAbstrait</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Questionnement</p><ul><li>Identifier la raison de cette erreur.</li><li>Identifier la solution pour contourner cette erreur.</li></ul></div>`,42),r=[n];function o(p,c,d,u,h,k){return i(),e("div",null,r)}const g=s(t,[["render",o]]);export{b as __pageData,g as default};
