import{_ as s}from"./chunks/sync.C-wA2TXQ.js";import{_ as i,c as a,o as e,U as n}from"./chunks/framework.aGaNZw_P.js";const l="/assets/layout_http_demo.CmAzJbO7.png",b=JSON.parse(`{"title":"Appeler une API simplement","description":"Appeler une API peut-Ãªtre intimidant, par le passÃ© il Ã©tait Â« en effet compliquÃ© Â» de faire des appels rÃ©seaux. En effet afin de s'assurer que votre application soit de qualitÃ© quelques rÃ¨gles sont imposÃ©es par la plateforme Android","frontmatter":{"description":"Appeler une API peut-Ãªtre intimidant, par le passÃ© il Ã©tait Â« en effet compliquÃ© Â» de faire des appels rÃ©seaux. En effet afin de s'assurer que votre application soit de qualitÃ© quelques rÃ¨gles sont imposÃ©es par la plateforme Android"},"headers":[],"relativePath":"tp/android/network.md","filePath":"tp/android/network.md","lastUpdated":1703687304000}`),t={name:"tp/android/network.md"},p=n(`<h1 id="appeler-une-api-simplement" tabindex="-1">Appeler une API simplement <a class="header-anchor" href="#appeler-une-api-simplement" aria-label="Permalink to &quot;Appeler une API simplement&quot;">â€‹</a></h1><p>Appeler une API peut-Ãªtre intimidant, par le passÃ© il Ã©tait Â« en effet compliquÃ© Â» de faire des appels rÃ©seaux. En effet afin de s&#39;assurer que votre application soit de qualitÃ© quelques rÃ¨gles sont imposÃ©es par la plateforme Android :</p><ul><li>Pas d&#39;appel rÃ©seau depuis le <code>UIThread</code>.</li><li>Pas de manipulation de l&#39;interface depuis le <code>IOThread</code>.</li></ul><div class="tip custom-block"><p class="custom-block-title">Petit rappel Wikipedia</p><p>Un thread ou fil (d&#39;exÃ©cution) ou tÃ¢che (terme et dÃ©finition normalisÃ©e par ISO/CEI 2382-7:2000 ; autres appellations connues : processus lÃ©ger, fil d&#39;instruction, processus allÃ©gÃ©, exÃ©tron, voire unitÃ© d&#39;exÃ©cution1 ou unitÃ© de traitement2,3[rÃ©f. nÃ©cessaire]) est similaire Ã  un processus, car tous deux reprÃ©sentent l&#39;exÃ©cution d&#39;un ensemble d&#39;instructions du langage machine d&#39;un processeur. Du point de vue de l&#39;utilisateur, ces exÃ©cutions semblent se dÃ©rouler en parallÃ¨le.</p></div><details class="details custom-block"><summary>Sommaire</summary><nav class="table-of-contents"><ul><li><a href="#pourquoi-est-ce-complexe">Pourquoi est-ce complexe ?</a></li><li><a href="#travailler-intelligemment">Travailler intelligemment</a></li><li><a href="#les-librairies">Les librairies</a><ul><li><a href="#les-permissinos">Les permissinos</a></li><li><a href="#la-configuration">La configuration</a></li><li><a href="#les-coroutines-kotlin">Les CoRoutines Kotlin</a></li><li><a href="#okhttp">OkHttp</a></li><li><a href="#gson">GSON</a></li><li><a href="#retrofit">Retrofit</a></li></ul></li><li><a href="#definir-les-modeles-de-retour">DÃ©finir les modÃ¨les de retour</a></li><li><a href="#le-code-permettant-de-creer-l-api">Le code permettant de crÃ©er l&#39;API</a></li><li><a href="#appeler-votre-api">Appeler votre API</a></li><li><a href="#a-faire">Ã€ faire</a></li></ul></nav></details><h2 id="pourquoi-est-ce-complexe" tabindex="-1">Pourquoi est-ce complexe ? <a class="header-anchor" href="#pourquoi-est-ce-complexe" aria-label="Permalink to &quot;Pourquoi est-ce complexe ?&quot;">â€‹</a></h2><p>Internet est une variable incontrÃ´lable dans un projet Android, vous n&#39;Ãªtes pas certains que :</p><ul><li>Votre utilisateur possÃ¨de du rÃ©seau.</li><li>Que celui-ci soit rapide.</li><li>Que votre serveur ne soit pas surchargÃ©.</li><li>Que votre serveur soit rapide.</li></ul><p>C&#39;est pour l&#39;ensemble de ces raisons que le code qui repose sur un appel rÃ©seau peut faire peur ! Mais vous allez le voir avec Kotlin, et les librairies de qualitÃ©s Ã  notre disposition un appel rÃ©seau sera aussi simple qu&#39;une Â« <code>setOnClickListener</code> Â»</p><h2 id="travailler-intelligemment" tabindex="-1">Travailler intelligemment <a class="header-anchor" href="#travailler-intelligemment" aria-label="Permalink to &quot;Travailler intelligemment&quot;">â€‹</a></h2><p>Nous allons travailler avec de la logique, nous sommes dans un langage-objet, nous allons utiliser la puissance de l&#39;objet, et des techniques modernes pour faire des appels rÃ©seaux sans nous prendre la tÃªte :</p><ul><li>Les interfaces pour dÃ©finir nos Â« endpoints Â» d&#39;API (comprendre les liens que nous allons devoir appeler).</li><li>L&#39;utilisation d&#39;objet pour Â« dÃ©coder Â» les rÃ©ponses du serveur (au format JSON)</li><li>Les coroutines pour le multithread. (<code>UiThread</code> <code>IOThread</code>)</li><li>Les scopes pour manipuler la vue aprÃ¨s l&#39;obtention des donnÃ©es (<code>runOnUiThread { â€¦ }</code>)</li></ul><p>Beaucoup de problÃ©matiques seront rÃ©solues par des librairies standards dans le monde d&#39;Android.</p><h2 id="les-librairies" tabindex="-1">Les librairies <a class="header-anchor" href="#les-librairies" aria-label="Permalink to &quot;Les librairies&quot;">â€‹</a></h2><p>Les librairies en question sont Ã  ajouter dans votre fichier <code>Gradle</code>, nous allons avoir besoin de :</p><ul><li>OkHttp</li><li>GSON</li><li>Retrofit</li><li>CoRoutines Kotlin</li></ul><hr><h3 id="les-permissinos" tabindex="-1">Les permissinos <a class="header-anchor" href="#les-permissinos" aria-label="Permalink to &quot;Les permissinos&quot;">â€‹</a></h3><p>Pour accÃ©der Ã  Internet, il faut ajouter une permission, celle-ci autorisera Ã  votre application l&#39;accÃ¨s Ã  Internet. Aucune confirmation utilisateur ne sera demandÃ©e.</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses-permission</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android:name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android.permission.INTERNET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="la-configuration" tabindex="-1">La configuration <a class="header-anchor" href="#la-configuration" aria-label="Permalink to &quot;La configuration&quot;">â€‹</a></h3><p>Vous pouvez, <strong>si vous le souhaitez</strong>, ajouter dans votre <code>Build.gradle</code> (app) le domaine de votre API dans le block <code>defaultConfig</code>, exemple</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    buildConfigField &quot;String&quot;, &quot;URI_REMOTE_SERVER&quot;, &quot;\\&quot;http://IP.DU.ESP\\&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="les-coroutines-kotlin" tabindex="-1">Les CoRoutines Kotlin <a class="header-anchor" href="#les-coroutines-kotlin" aria-label="Permalink to &quot;Les CoRoutines Kotlin&quot;">â€‹</a></h3><ul><li>Gestion automatique des threads</li><li>Traitement asynchrone des tÃ¢ches</li><li>Un mot magiqueâ€¦ <code>suspend</code></li></ul><div class="tip custom-block"><p class="custom-block-title">suspend ?</p><p>Les coroutines sont dites Â« suspendable Â», elles vont pouvoir donc attendre que le rÃ©seau donne sa rÃ©ponse pour rÃ©veiller le traitement. Pour nous Ã§a va indiquer que notre code sera appelÃ© Â« plus tard Â» au moment oÃ¹ le contenu sera disponible.</p><p>Magique ? Non pas vraiment, mais pratique Ã§a c&#39;est certains. En tout cas, ce mot-clÃ© est trÃ¨s pratique il nous simplifiera trÃ¨s grandement la partie appel HTTP en retirant toute la partie <code>enqueue</code> que vous avez peut-Ãªtre dÃ©jÃ  croisÃ© sur Internet.</p></div><p><a href="https://kotlinlang.org/docs/coroutines-overview.html" target="_blank" rel="noreferrer">Plus d&#39;informations</a></p><h3 id="okhttp" tabindex="-1">OkHttp <a class="header-anchor" href="#okhttp" aria-label="Permalink to &quot;OkHttp&quot;">â€‹</a></h3><p>Client HTTP permettant de :</p><ul><li>RestClient</li><li>Http2</li><li>Gestion du cache</li><li>Intercepteur de requÃªte</li></ul><h3 id="gson" tabindex="-1">GSON <a class="header-anchor" href="#gson" aria-label="Permalink to &quot;GSON&quot;">â€‹</a></h3><p>Cette librairie va nous permettre la SÃ©rialisation / Deserialisation automatique entre un JSON et un Objet Java / Kotlin</p><h3 id="retrofit" tabindex="-1">Retrofit <a class="header-anchor" href="#retrofit" aria-label="Permalink to &quot;Retrofit&quot;">â€‹</a></h3><p>Surcouche Ã  OkHttp permettant de simplifier toute la partie des appels rÃ©seaux :</p><ul><li>Une API Http qui s&#39;utilise comme une Â« Interface Â».</li><li>Conversion de donnÃ©es (mapping automatique des objets ğŸš€).</li><li>Utilise des annotations (@GET, @POST, @PUT, @DELETE, @HEAD, â€¦)</li><li>Compatible CoRoutine (mais Ã©galement sans)</li></ul><div class="language-groovy vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.squareup.retrofit2:retrofit:2.9.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.squareup.retrofit2:converter-gson:2.9.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.squareup.okhttp3:okhttp:4.9.3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.squareup.okhttp3:logging-interceptor:4.9.3&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Une fois ajoutÃ©, n&#39;oubliez pas le sync <img src="`+s+`" alt="Sync" loading="lazy"></p></div><p>Notre projet est maintenant prÃªt pour faire des appels rÃ©seau. Nous allons Ã©crire le code Â« minimum Â» permettant de rÃ©aliser les appels.</p><h2 id="definir-les-modeles-de-retour" tabindex="-1">DÃ©finir les modÃ¨les de retour <a class="header-anchor" href="#definir-les-modeles-de-retour" aria-label="Permalink to &quot;DÃ©finir les modÃ¨les de retour&quot;">â€‹</a></h2><p>La premiÃ¨re Ã©tape et certainement la plus importante, c&#39;est la dÃ©finition des modÃ¨les de retour de votre API. En tant que dÃ©butant vous nÃ©gligez souvent cette partie-lÃ  du travail. C&#39;est pourtant l&#39;un des Ã©lÃ©ments les plus importants. Pour l&#39;exemple, je vais prendre un retour d&#39;API tels que :</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Valentin Brosseau&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ceci est un retour d&#39;API d&#39;exemple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Random data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Le format JSON est simple Ã  lire, vous l&#39;avez certainement croisÃ©, mais dans l&#39;exemple prÃ©cÃ©dent nous avons donc :</p><ul><li>Un tableau (identifiable par la notation <code>[]</code>).</li><li>Une structure <code>Objet</code>, qui contient <code>4 propriÃ©tÃ©s</code> (id, name, content, done).</li></ul><p>Nous allons donc avoir une dÃ©finition en Kotlin qui va ressembler Ã  :</p><div class="warning custom-block"><p class="custom-block-title">Un instant</p><p>Le code que vous allez voir, est lÃ  juste pour illustrer il ne fonctionne pas directement. C&#39;est juste une Â« traduction objet Â» de la structure JSON prÃ©cÃ©demment proposÃ©e.</p></div><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Objet prÃ©sent dans la liste (structure objet)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DonnÃ©es fourni par l&#39;API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SampleObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">ET C&#39;EST TOUT</p><p>Cette Ã©tape que vous nÃ©gligez souvent est aussi simple que Ã§aâ€¦</p></div><h2 id="le-code-permettant-de-creer-l-api" tabindex="-1">Le code permettant de crÃ©er l&#39;API <a class="header-anchor" href="#le-code-permettant-de-creer-l-api" aria-label="Permalink to &quot;Le code permettant de crÃ©er l&#39;API&quot;">â€‹</a></h2><p>Nous avons maintenant notre objet de retour, nous allons pouvoir attaquer la partie qui nous intÃ©resse le plus la partie appel HTTP. Vous allez le voir grÃ¢ce Ã  OkHTTP, Gson et Retrofit cette partie-lÃ  sera trÃ¨s simple. D&#39;ailleurs, elle est assez rÃ©pÃ©titive une fois que vous en avez fait une vous en avez fait des centaines.</p><p>Nous allons donc dÃ©clarer une <code>Interface</code> cette interface va dÃ©crire les appels HTTP :</p><ul><li>Les liens.</li><li>Le type (GET, POST, â€¦).</li><li>Les paramÃ¨tres.</li><li>Et surtout le format de retour que vous souhaitez.</li></ul><p>PlutÃ´t que des grandes explications, voilÃ  un exemple de comment Ã§a fonctionne.</p><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * ApiService</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApiService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // DÃ©but dÃ©finition des diffÃ©rentes API disponible sur votre serveur</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) identifier: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SampleObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SampleObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SampleObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fin de la dÃ©finition</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Ã‰quivalenent en kotlin d&#39;Ã©lÃ©ment Â« static Â»</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * CrÃ©ation d&#39;un singleton pour la simplicitÃ©, mais normalement nous utilisons plutÃ´t un</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * injecteur de dÃ©pendances.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         * CrÃ©ation de l&#39;objet qui nous permettra de faire les appels d&#39;API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApiService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GsonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSON deserializer/serializer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Create the OkHttp Instance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> okHttpClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpLoggingInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BuildConfig.DEBUG) HttpLoggingInterceptor.Level.BODY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpLoggingInterceptor.Level.NONE))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { chain: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Accept&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proceed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Retrofit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baseUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://le.lien.de.votre.api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mieux -&gt; BuildConfig.URI_REMOTE_SERVER, oui oui Ã©crire en dur un lien est une TRÃˆS MAUVAISE IDÃ‰E !</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(okHttpClient)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConverterFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GsonConverterFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gson))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApiService::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Oui c&#39;est tout</p><p>Cette Interface contient l&#39;ensemble de la logique nÃ©cessaire. Le reste, Ã§a va Ãªtre votre code Â« permettant d&#39;utiliser l&#39;API Â». Et c&#39;est lÃ  le grand avantage de cette stack applicative.</p><p>Vous allez donc consommer de la donnÃ©e dans des types Â« natifs Â» comme si vos donnÃ©es Ã©taient en locale, le tout typer. La Rolls donc ğŸ‘Œ</p></div><div class="danger custom-block"><p class="custom-block-title">N&#39;oubliez pas la structure</p><p>Ici je me concentre sur le code et pas sur l&#39;organisation. Bien Ã©videmment, dans votre vrai code vous rangerez correctement cette Interface.</p><p>Dans par exemple un package <code>remote.http</code>.</p><p>ğŸš€ C&#39;est important ne le nÃ©gligez pas ğŸš€</p></div><h2 id="appeler-votre-api" tabindex="-1">Appeler votre API <a class="header-anchor" href="#appeler-votre-api" aria-label="Permalink to &quot;Appeler votre API&quot;">â€‹</a></h2><p>Nous y sommes, enfin ! VoilÃ  l&#39;Ã©tape que vous attendiezâ€¦ Comment appeler l&#39;API depuis votre <code>activity</code>â€¦ Vous allez voir Ã§a va encore Ãªtre trÃ¨Ã¨Ã¨Ã¨s simple !</p><p>Pour l&#39;exemple voilÃ  notre Interface :</p><p><img src="`+l+`" alt="Exemple de layout" loading="lazy"></p><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Votre code de d&#39;habitudeâ€¦</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(R.id.httpButton).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOnClickListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            CoroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.IO).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                runCatching</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApiService.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ledStatus.identifier)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    runOnUiThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        dataSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrStatus)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Toast.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@YourActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RÃ©sultat de l&#39;appel rÃ©seau&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrStatus.size, Toast.LENGTH_SHORT).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>DÃ©taillons le code, nous avons une partie de votre <code>onCreate</code>, pour l&#39;instant aucun changement.</p><p>La partie qui vous intÃ©resse est la suivante, pour que celle-ci soit comprÃ©hensible lÃ  voilÃ  documentÃ©.</p><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DÃ©marrage d&#39;une coroutine sur le thread IO celui permettant de faire un appel rÃ©seau.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Si vous Ãªtes sur le UI l&#39;application plantera instantanÃ©ment (car c&#39;est interdit, vous risquez de freezer l&#39;interface le temps de la rÃ©ponse du serveur)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.IO).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runCatching</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Â« Le Scope Â» prÃ©sent ici est capable de s&#39;arrÃªter et de se rÃ©veiller en fonction d&#39;action extÃ©rieur, dans notre cas, il va Ãªtre actif au moment de la demande Â« de la ressource Â» rÃ©seau.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // On appel le code gÃ©nÃ©rÃ© par Â« Retrofit Â», en suivant la dÃ©finition de votre interface.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Nous allons donc ici avoir en retour un tableau de Â« SampleObject Â»</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApiService.instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ledStatus.identifier)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Puis il sera rÃ©veillÃ© au moment de la rÃ©ponse du serveur pour afficher les donnÃ©es</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runOnUiThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // runOnUiThread indique que le code sera exÃ©cutÃ© dans le contexte de l&#39;UI, c&#39;est-Ã -dire dans le bon thread.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ATTENTION si vous oubliez le runOnUiThread la manipulation de votre vue sera impossible ! Et votre application plantera.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            dataSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrStatus)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Toast.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@YourActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RÃ©sultat de l&#39;appel rÃ©seau&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrStatus.size, Toast.LENGTH_SHORT).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>Et voilÃ  ! C&#39;est fini, votre application est maintenant capable de faire des appels rÃ©seau.</p><h2 id="a-faire" tabindex="-1">Ã€ faire <a class="header-anchor" href="#a-faire" aria-label="Permalink to &quot;Ã€ faire&quot;">â€‹</a></h2><p>Maintenant que nous avons vu la thÃ©orie, je vous laisse implÃ©menter la consigne suivante :</p><ul><li>L&#39;API Ã  appeler est la suivante : <a href="https://reqres.in/api/users" target="_blank" rel="noreferrer">https://reqres.in/api/users</a></li><li>Vous devez crÃ©er une activity qui affichera le contenu retournÃ© par l&#39;API</li><li>Vous devez dÃ©finir des modÃ¨les correspondant au retour.</li><li>Vous devez organiser votre code en package.</li><li>Vous devez utiliser un RecyclerView (Natif, ou librairie type Recyclical)</li></ul><details class="details custom-block"><summary>En panne d&#39;inspiration ?</summary><p><a href="https://github.com/c4software/android-api-course-project" target="_blank" rel="noreferrer">VoilÃ  un exemple de code pour rÃ©pondre Ã  la consigne</a></p></details>`,68),r=[p];function h(k,o,d,u,c,E){return e(),a("div",null,r)}const y=i(t,[["render",h]]);export{b as __pageData,y as default};
