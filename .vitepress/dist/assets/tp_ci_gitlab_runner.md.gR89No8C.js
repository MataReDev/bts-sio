import{_ as e,c as n,o as s,U as a}from"./chunks/framework.aGaNZw_P.js";const i="/assets/runner_loop.DZxojF58.png",t="/assets/type_executor.B3EVYctI.png",r="/assets/runner_token.SP60i1dy.png",l="/assets/register_result.C7uMKJwU.png",o="/assets/runner_state_off.Dh5c65wO.png",u="/assets/runner_docker_ps.BJOoiO1E.png",c="/assets/runner_state_on.1PeIdZat.png",p="/assets/configuration_lancement.CkoiQeBm.png",d="/assets/test_ci.ptceOQLk.png",m="/assets/ps_on_build.D_FKAKKY.png",y=JSON.parse(`{"title":"Installation & Configuration d'un Runner","description":"Dans ce TP nous allons voir comment installer un Runner Gitlab-CI sur votre machine. Posséder un Runner Gitlab aura plusieurs avantages que nous détaillerons au fur et à mesure ensemble.","frontmatter":{"description":"Dans ce TP nous allons voir comment installer un Runner Gitlab-CI sur votre machine. Posséder un Runner Gitlab aura plusieurs avantages que nous détaillerons au fur et à mesure ensemble."},"headers":[],"relativePath":"tp/ci/gitlab/runner.md","filePath":"tp/ci/gitlab/runner.md","lastUpdated":1640899309000}`),h={name:"tp/ci/gitlab/runner.md"},k=a('<h1 id="installation-configuration-d-un-runner" tabindex="-1">Installation &amp; Configuration d&#39;un Runner <a class="header-anchor" href="#installation-configuration-d-un-runner" aria-label="Permalink to &quot;Installation &amp; Configuration d&#39;un Runner&quot;">​</a></h1><p>Dans ce TP nous allons voir comment installer un Runner Gitlab-CI sur votre machine. Posséder un Runner Gitlab aura plusieurs avantages que nous détaillerons au fur et à mesure ensemble.</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Nous avons vu que Gitlab-CI « offrait » des runners pour compiler / exécuter vos opérations de CI. Ces runners sont partagés avec l&#39;ensemble des utilisateurs de la plateforme Gitlab. Même s’ils sont globalement très réactifs et très peu souvent en « panne », je vous propose ici d&#39;installer votre (ou vos) propre(s) runner afin de maitriser entièrement votre processus de CI.</p><ul><li>À votre avis, pourquoi est-ce important ? Quels « problèmes » voyez-vous à l&#39;utilisateur des runners partagé ?</li></ul><p>Le runner Gitlab-CI est un petit logiciel qui va être connecté aux serveurs de Gitlab et qui va se mettre en écoute de demande de tâche de compilation / test / packaging que <strong>vos projets</strong> ont besoin de réaliser. L&#39;avantage est double :</p><ul><li>Pas de limite en nombre de compilation.</li><li>Accès à vos ressources locales pour le déploiement.</li></ul><p><img src="'+i+'" alt="Runner LOOP" loading="lazy"></p><h2 id="l-executeur" tabindex="-1">L&#39;exécuteur <a class="header-anchor" href="#l-executeur" aria-label="Permalink to &quot;L&#39;exécuteur&quot;">​</a></h2><p>Un Runner Gitlab-CI est un simple démon qui attend les Jobs comme vus dans le diagramme précédent. Une fois un Job reçu celui-ci va demander à « un exécuteur » de traiter la demande. Les exécuteurs sont des sous-processus qui vont se charger de faire les commandes (<code>scripts</code>) que vous avez définies dans votre gitlab-ci. Gitlab-CI est capable de fonctionner de différente manière :</p><ul><li>SSH</li><li>Shell</li><li>Parallels</li><li>VirtualBox</li><li>Docker</li><li>Docker Machine (auto-scaling)</li><li>Kubernetes</li><li>Custom</li></ul><p><img src="'+t+'" alt="Type d&#39;exécuteurs" loading="lazy"></p><h3 id="comment-choisir" tabindex="-1">Comment choisir ? <a class="header-anchor" href="#comment-choisir" aria-label="Permalink to &quot;Comment choisir ?&quot;">​</a></h3><h4 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;Shell&quot;">​</a></h4><p>C&#39;est le plus simple de tous. Vos scripts seront lancés sur la machine qui possède le Runner.</p><h4 id="parallels-virtualbox" tabindex="-1">Parallels, VirtualBox <a class="header-anchor" href="#parallels-virtualbox" aria-label="Permalink to &quot;Parallels, VirtualBox&quot;">​</a></h4><p>Le Runner va créer (ou utiliser) une machine virtuelle pour exécuter les scripts. Pratique pour avoir un environnement spécifique (exemple macOS)</p><h4 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h4><p>Utilise Docker pour créer / exécuter vos scripts et traitement (en fonction de la configuration de votre <code>.gitlab-ci.yml</code>)</p><p><strong>Solution la plus simple et à privilégié</strong></p><h4 id="docker-machine-auto-scaling" tabindex="-1">Docker Machine (auto-scaling) <a class="header-anchor" href="#docker-machine-auto-scaling" aria-label="Permalink to &quot;Docker Machine (auto-scaling)&quot;">​</a></h4><p>Identique à docker, mais dans un environnement Docker multimachine avec auto-scaling.</p><h4 id="kubernetes" tabindex="-1">Kubernetes <a class="header-anchor" href="#kubernetes" aria-label="Permalink to &quot;Kubernetes&quot;">​</a></h4><p>Lance vos builds dans un cluster Kubernetes. Très similaire à Docker-Machine</p><h4 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;SSH&quot;">​</a></h4><p>À ne pas utiliser. Il existe, car il permet à Gitlab-CI de gérer l&#39;ensemble des configurations possibles.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>L&#39;installation d&#39;un Runner Gitlub-CI est possible quelques soit votre :</p><ul><li>Système d&#39;exploitation.</li><li>Architecture (ARM, X86, …)</li></ul><p>Deux installations sont possibles « en mode natif » (binaire) en mode « Docker » (container)</p><div class="tip custom-block"><p class="custom-block-title">Une préférence ?</p><p>Pas de préférence particulière sur la façon d&#39;installer de Runner Gitlab-CI, dans les deux cas les options sont relativement similaires.</p></div><h3 id="en-mode-«-natif-»-binaire" tabindex="-1">En mode « natif » (binaire) <a class="header-anchor" href="#en-mode-«-natif-»-binaire" aria-label="Permalink to &quot;En mode « natif » (binaire)&quot;">​</a></h3><p>L&#39;installation en mode « natif », est une installation similaire à l&#39;installation d&#39;un logiciel classique sur votre ordinateur. Le runner Gitlab-CI va prendre la forme d&#39;un <em>service</em> qui démarrera en même temps que la machine sur lequel vous l&#39;installez. L&#39;installation est différente en fonction de votre environnement. Mais celle-ci se résume toujours à la même suite d&#39;opérations :</p><ul><li>Récupération du Runner.</li><li>Installation</li><li>Configurations / Démarrage</li></ul><p>En fonction de votre environnement, l&#39;installation peut-être différente, je vous laisse suivre la documentation officielle (et posez-moi des questions) :</p><ul><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html" target="_blank" rel="noreferrer">GNU/Linux</a></li><li><a href="https://docs.gitlab.com/runner/install/osx.html" target="_blank" rel="noreferrer">macOS</a></li><li><a href="https://docs.gitlab.com/runner/install/windows.html" target="_blank" rel="noreferrer">Windows</a></li></ul><div class="danger custom-block"><p class="custom-block-title">Attention danger</p><p>Nous avons vu dans les exécuteurs qu&#39;il était possible de choisir <strong>Shell</strong>. Même si dans certains cas c&#39;est utile (exemple compilation d&#39;application iOS), <strong>ce mode de fonctionnement</strong> est très dangereux ! En effet avec ce mode vous lancerez des commandes de manière arbitraire directement sur la machine. Ce qu&#39;il faut comprendre ici c&#39;est que si vous vous trompez et que vous lancez un <code>rm</code> hasardeux vous allez casser votre propre machine.</p><p><strong>Donc attention danger</strong>, si vous installez Gitlab Runner sur votre machine en mode binaire, je vous conseille vivement de choisir le mode de fonctionnement <code>Docker executor</code> lors de la configuration.</p></div><h3 id="dans-un-docker" tabindex="-1">Dans un Docker <a class="header-anchor" href="#dans-un-docker" aria-label="Permalink to &quot;Dans un Docker&quot;">​</a></h3><p>Si vous cherchez une solution simple pour configurer / installer un runner Gitlab, la solution Docker est clairement la plus facile. Elle vous permettra en quelques minutes de monter un Runner. La <a href="https://docs.gitlab.com/runner/install/docker.html" target="_blank" rel="noreferrer">documentation officielle</a> explique bien comment procéder, mais si on résume la procédure. Celle-ci se déroulera en deux temps :</p><h4 id="etape-1-enregistrement-du-runner-avec-gitlab-ci" tabindex="-1">Étape 1 : Enregistrement du Runner avec Gitlab-CI <a class="header-anchor" href="#etape-1-enregistrement-du-runner-avec-gitlab-ci" aria-label="Permalink to &quot;Étape 1 : Enregistrement du Runner avec Gitlab-CI&quot;">​</a></h4><p>L&#39;étape d&#39;enregistrement n&#39;est à réaliser qu&#39;une seule fois. Elle a pour but d&#39;autoriser Gitlab à communiquer avec votre runner, elle s&#39;assure aussi que seuls vos jobs vont être lancés sur votre Runner.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/config:/etc/gitlab-runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab/gitlab-runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>À cette étape, nous initialisons la configuration de notre runner, vous allez avoir plusieurs questions, l&#39;une d&#39;entre elles sera l&#39;identifiant de votre Runner. Celui-ci est indiqué dans la partie CI/CD de votre projet :</p><p><img src="'+r+'" alt="Runner Token" loading="lazy"></p><p>Je vous laisse remplir les différentes questions, si vous avez des questions je suis ici 👋. Dans mon cas voilà mes choix :</p><p><img src="'+l+'" alt="Runner Resultat" loading="lazy"></p><ul><li>À quoi correspond les tags ?</li><li>Pourquoi est-je choisi docker comme <code>executor</code> ?</li></ul><div class="tip custom-block"><p class="custom-block-title">Be curious !</p><p>La configuration de votre runner est maintenant générée. Celle-ci est contenue dans le fichier <code>config</code>. Je vous laisse la regarder.</p></div><h4 id="etape-2-lancer-le-runner" tabindex="-1">Étape 2 : Lancer le runner <a class="header-anchor" href="#etape-2-lancer-le-runner" aria-label="Permalink to &quot;Étape 2 : Lancer le runner&quot;">​</a></h4><p>Notre runner est maintenant connu de Gitlab, il n&#39;est pour l&#39;instant par contre pas encore en fonction.</p><p><img src="'+o+`" alt="Runner is off" loading="lazy"></p><p>Pour le lancer on réutilise évidemment Docker, via la commande suivante :</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab-runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/config:/etc/gitlab-runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     gitlab/gitlab-runner:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Un instant :stop:</p><p>Analysons ensemble la commande afin de comprendre chacune des lignes, pour ne pas lancer n&#39;importe quoi sur notre machine.</p></div><p>Cette action lance un Container Docker visible via la commande <code>docker ps</code> :</p><p><img src="`+u+'" alt="Runner docker ps" loading="lazy"></p><p><strong>Félicitation</strong>, votre runner est maintenant actif sur Gitlab-CI :</p><p><img src="'+c+'" alt="Runner is on" loading="lazy"></p><h2 id="configuration-test" tabindex="-1">Configuration &amp; Test <a class="header-anchor" href="#configuration-test" aria-label="Permalink to &quot;Configuration &amp; Test&quot;">​</a></h2><p>Votre système est maintenant prêt à recevoir des commandes / des ordres depuis Gitlab-CI. Pour être certains que ça soit bien votre <code>runner</code> qui prend les ordres il faut désactiver les runners partagés. Cette opération est au même endroit que la partie Token des Runners :</p><p><img src="'+p+'" alt="Shared_runner" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">À partir de maintenant</p><p>À partir de maintenant (sous réserve que votre runner soit actif), vos builds ne seront plus décomptés du quota de 400 minutes mensuel. Vous n&#39;avez plus de limite.</p></div><p>Gitlab offre une option pour lancer un build, pour ça rendez-vous dans la partie <code>CI/CD &gt; Pipelines</code> de votre projet :</p><p><img src="'+d+'" alt="Test CI" loading="lazy"></p><p>Puis faites un <code>Run Pipelines</code> depuis la branche souhaitée.</p><div class="tip custom-block"><p class="custom-block-title">Que va-t-il se passer ?</p><p>Votre runner va être sollicité pour compiler. Vous pouvez suivre les opérations directement depuis Gitlab-CI. Mais si vous êtes curieux, vous pouvez également lancer un <code>docker ps</code> sur votre machine, vous devriez voir au bout de quelques secondes un container démarré sur votre machine. Dans mon cas :</p><p><img src="'+m+'" alt="Docker PS quand ça build" loading="lazy"></p></div><p>Quelques questions :</p><ul><li>Comment s&#39;assurer que notre runner s&#39;exécute que dans certains cas ?</li><li>Comment utiliser par exemple les Shared Runner pour la partie « Construction de l&#39;image Docker », mais pas dans les autres cas ?</li><li>Comment utiliser notre runner que pour la partie « livraison continue » par exemple ?</li></ul>',68),g=[k];function b(v,f,C,q,F,_){return s(),n("div",null,g)}const P=e(h,[["render",b]]);export{y as __pageData,P as default};
