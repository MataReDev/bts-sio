import{_ as s,c as e,o as i,U as a}from"./chunks/framework.aGaNZw_P.js";const n="/assets/tests_results.CSAkEKYz.png",t="/assets/with_pages.Gp6x9dNO.png",g=JSON.parse(`{"title":"Tester en continu","description":"L'autre gros avantage d'une stack d'intégration continue c'est la partie « test en continu ». Actuellement il y a fort à parier que vous avez appris que vous pouviez tester vos projets pour garantir la bonne qualité du code que vous produisez, mais également vous assurer de la non-régression.","frontmatter":{"description":"L'autre gros avantage d'une stack d'intégration continue c'est la partie « test en continu ». Actuellement il y a fort à parier que vous avez appris que vous pouviez tester vos projets pour garantir la bonne qualité du code que vous produisez, mais également vous assurer de la non-régression."},"headers":[],"relativePath":"tp/ci/ci-test/tests.md","filePath":"tp/ci/ci-test/tests.md","lastUpdated":1644942778000}`),l={name:"tp/ci/ci-test/tests.md"},r=a(`<h1 id="tester-en-continu" tabindex="-1">Tester en continu <a class="header-anchor" href="#tester-en-continu" aria-label="Permalink to &quot;Tester en continu&quot;">​</a></h1><p>L&#39;autre gros avantage d&#39;une stack d&#39;intégration continue c&#39;est la partie « test en continu ». Actuellement il y a fort à parier que vous avez appris que vous pouviez tester vos projets pour garantir la bonne qualité du code que vous produisez, mais également vous assurer de la non-régression.</p><p>L&#39;intégration Continue (CI) va nous permettre justement de tester cette non-régression au fur et à mesure du projet. Ce TP va nous permettre de mettre en place la stack permettant de tester votre projet. Je vais illustrer la problématique avec deux langages, PHP et JavaScript mais sachez que ce que nous allons voir ici fonctionnera avec <strong>n&#39;importe quel langage de programmation</strong>.</p><p>Je ne vais pas me concentrer ici sur la partie écriture des tests (car la question n&#39;est pas ici). Si vous avez déjà écrit des tests vous vous êtes peut-être déjà demandé « Pourquoi ? », en effet quand on apprend à écrire des tests on s&#39;intéresse souvent qu&#39;aux tests et pas à quand les tests vont s&#39;exécuter… Et bien c&#39;est maintenant !</p><h2 id="les-tests-et-le-javascript" tabindex="-1">Les tests et le JavaScript <a class="header-anchor" href="#les-tests-et-le-javascript" aria-label="Permalink to &quot;Les tests et le JavaScript&quot;">​</a></h2><p>Comme en PHP il est possible de tester votre code JavaScript pour s&#39;assurer que celui-ci ne connaisse pas de régression ou tout simplement ne perde pas en qualité au fur et à mesure des développements.</p><p>L&#39;idée ici n&#39;est pas de voir comment vous devez écrire des tests en JavaScript, l&#39;idée est plutôt de voir comment les tests vont s&#39;intégrer dans notre flow de développement. Pour illustrer, je vais utiliser Gitlab-CI (car je trouve la plateforme bien faite, et gratuite).</p><ul><li>La première étape va être la récupération du projet d&#39;exemple. <a href="/sample/vite-project-with-test.zip">Celui-ci est disponible ici</a></li><li>Nous avons notre projet « préconfiguré », <strong>avant de continuer, je vous laisse le tester sur votre machine</strong>.</li><li>Pour activer la partie CI il suffit de créer un fichier <code>gitlab-ci.yml</code>. Voilà le contenu.</li></ul><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">before_script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run test:unit</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    reports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      junit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">junit.xml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>C&#39;est à vous, je vous laisse créer le :</p><ul><li>Le projet sur Gitlab</li><li>Tester.</li><li>Ajouter le fichier <code>.gitlab-ci.yml</code></li><li>Le push vers Gitlab.</li></ul><p>Une fois correctement configuré, vous devriez voir :</p><p><img src="`+n+'" alt="Résultat" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">Nous avons ici les résultats</p><p>Pour chaque Pipelines nous allons donc avoir le résultat des tests. Si un test échoue l&#39;ensemble du processus de CI/CD va être arrêté pour ne pas déployer un site qui ne fonctionnerait potentiellement plus.</p></div><h2 id="modifier-les-tests" tabindex="-1">Modifier les tests <a class="header-anchor" href="#modifier-les-tests" aria-label="Permalink to &quot;Modifier les tests&quot;">​</a></h2><p>Je vous laisse modifier un peu les tests pour tester le fonctionnement :</p><ul><li>Ajouter un nouveau test.</li><li>Modifier un test.</li><li>« Rendre un test » non valide.</li></ul><p>C&#39;est à vous ! Je suis là si vous avez des questions.</p><h2 id="integrer-le-test-dans-un-flow-ci-cd-entier" tabindex="-1">Intégrer le test dans un flow CI/CD entier <a class="header-anchor" href="#integrer-le-test-dans-un-flow-ci-cd-entier" aria-label="Permalink to &quot;Intégrer le test dans un flow CI/CD entier&quot;">​</a></h2><p>Nous avons vu comment les tests pouvaient être ajoutés dans votre processus de développement, mais en général nous n&#39;avons pas que les tests dans un projet ! Avec Gitlab-CI il va être très simple d&#39;ajouter par exemple Gitlab-Page pour livrer en continu votre site internet.</p><p>Je vous laisse reprendre le <a href="./../pages.html#deployer-un-site-vuejs">TP Gitlab Page pour intégrer la partie « pages ».</a></p><p><img src="'+t+`" alt="Résultat" loading="lazy"></p><details class="details custom-block"><summary>Un peu d&#39;aide? Bloqué ?</summary><p>Vous avez vraiment cherché ? Si oui, voilà une solution possible.</p><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run gitlab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mv public public-vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mv dist public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Je vous laisse chercher ou l&#39;ajouter.</p></details>`,23),p=[r];function o(u,c,h,d,k,E){return i(),e("div",null,p)}const v=s(l,[["render",o]]);export{g as __pageData,v as default};
